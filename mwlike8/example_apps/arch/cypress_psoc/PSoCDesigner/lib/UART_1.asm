;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME:   UART_1.asm
;;  Version: 4.2, Updated on 2003/11/18 at 15:02:35
;;  Generated by PSoC Designer ver 4.1 b931 : 21 January, 2004
;;
;;  DESCRIPTION:  UART User Module software implementation file for the
;;                22/24/25/26/27xxx families.
;;
;;
;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API
;;        function returns. Even though these registers may be preserved now,
;;        there is no guarantee they will be preserved in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************


include "m8c.inc"
include "UART_1.inc"

area text (ROM, REL)

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
;-------------------------------------------------------------------
;  Declare the functions global for both assembler and C compiler.
;
;  Note that there are two names for each API. First name is
;  assembler reference. Name with underscore is name refence for
;  C compiler.  Calling function in C source code does not require
;  the underscore.
;-------------------------------------------------------------------
export  UART_1_EnableInt
export _UART_1_EnableInt
export  UART_1_DisableInt
export _UART_1_DisableInt

export  UART_1_Start
export _UART_1_Start
export  UART_1_Stop
export _UART_1_Stop
export  UART_1_SendData
export _UART_1_SendData
export  UART_1_bReadTxStatus
export _UART_1_bReadTxStatus
export  UART_1_bReadRxData
export _UART_1_bReadRxData
export  UART_1_bReadRxStatus
export _UART_1_bReadRxStatus

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;       WARNING WARNING WARNING
; The following exports are for backwards
; compatibility only and should not be used
; for new designs.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
export  bUART_1_ReadTxStatus
export _bUART_1_ReadTxStatus
export  bUART_1_ReadRxData
export _bUART_1_ReadRxData
export  bUART_1_ReadRxStatus
export _bUART_1_ReadRxStatus
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;             END WARNING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

area text (ROM,REL)

;-----------------------------------------------
;  EQUATES
;-----------------------------------------------
bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit

AREA UserModules (ROM, REL)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_EnableInt
;
;  DESCRIPTION:
;     Enables this UART's interrupt by setting the interrupt enable mask
;     bit associated with this User Module. Remember to call the global
;     interrupt enable function by using the macro: M8C_EnableGInt.
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Sets the specific user module interrupt enable mask bit in both the
;     TX and RX blocks.
;
;-----------------------------------------------------------------------------
 UART_1_EnableInt:
_UART_1_EnableInt:
   M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
   M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_DisableInt
;
;  DESCRIPTION:
;     Disables this UART's interrupt by clearing the interrupt enable mask bit
;     associated with this User Module.
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Clears the specific user module interrupt enable mask bit in the TX
;     and RX blocks.
;
;-----------------------------------------------------------------------------
 UART_1_DisableInt:
_UART_1_DisableInt:
   M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
   M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_Start(BYTE bParity)
;
;  DESCRIPTION:
;     Sets the start bit and parity in the Control register of this user module.
;
;  ARGUMENTS:
;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
;        Passed in the A register.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Set the specified parity and start bits in the Control register of the
;     TX and RX blocks.
;
;-----------------------------------------------------------------------------
 UART_1_Start:
_UART_1_Start:
   or    A, bfCONTROL_REG_START_BIT
   mov   REG[UART_1_TX_CONTROL_REG], A
   mov   REG[UART_1_RX_CONTROL_REG], A
IF (UART_1_RXBUF_ENABLE)
   call  _UART_1_CmdReset
ENDIF
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_Stop
;
;  DESCRIPTION:
;     Disables UART operation.
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Clear the start bit in the Control registers.
;
;-----------------------------------------------------------------------------
 UART_1_Stop:
_UART_1_Stop:
   and   REG[UART_1_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   and   REG[UART_1_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_SendData
;
;  DESCRIPTION:
;     Initiates a transmission of data.
;
;  ARGUMENTS:
;     BYTE  TxData - data to transmit. PASSED in A register.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Writes data to the TX buffer register.
;
;-----------------------------------------------------------------------------
 UART_1_SendData:
_UART_1_SendData:
        mov REG[UART_1_TX_BUFFER_REG], A
        ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_bReadTxStatus
;
;  DESCRIPTION:
;     Reads the Tx Status bits in the Control/Status register.
;;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
;           status bits (returned in A)
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Read TX status and control register.
;
;-----------------------------------------------------------------------------
 UART_1_bReadTxStatus:
_UART_1_bReadTxStatus:
 bUART_1_ReadTxStatus:    ; For backwards compatibility only
_bUART_1_ReadTxStatus:    ; For backwards compatibility only
        mov A,  REG[UART_1_TX_CONTROL_REG]
        ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_bReadRxData
;
;  DESCRIPTION:
;     Reads the RX buffer register.  Should check the status regiser to make
;     sure data is valid.
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     bRxData - returned in A.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     none.
;
;-----------------------------------------------------------------------------
 UART_1_bReadRxData:
_UART_1_bReadRxData:
 bUART_1_ReadRxData:    ; For backwards compatibility only
_bUART_1_ReadRxData:    ; For backwards compatibility only
        mov A, REG[UART_1_RX_BUFFER_REG]
        ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: UART_1_bReadRxStatus
;
;  DESCRIPTION:
;     Reads the RX Status bits in the Control/Status register.
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
;           returned in A.
;
;  SIDE EFFECTS:
;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION OR PROCEDURE:
;     Read the status and control register.
;
;-----------------------------------------------------------------------------
 UART_1_bReadRxStatus:
_UART_1_bReadRxStatus:
 bUART_1_ReadRxStatus:     ; For backwards compatibility only
_bUART_1_ReadRxStatus:     ; For backwards compatibility only
        mov A,  REG[UART_1_RX_CONTROL_REG]
        ret
.ENDSECTION

; End of File UART_1.asm
