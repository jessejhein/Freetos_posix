                        .module printf.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./printf.c
 0000                   .dbfunc e format_manipulate _format_manipulate fX
 0000           ;           flag -> X+0
 0000           ;       flag_ptr -> X-7
 0000           _format_manipulate::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 90
 0004           ; /*  Copyright (C) 2004                cheng chung yan <yan@amonics.com> for 8-bit system
 0004           ; *  lib C in 8 bit system
 0004           ; *
 0004           ; *  This library is free software; you can redistribute it and/or
 0004           ; *  modify it under the terms of the GNU Library General Public
 0004           ; *  License as published by the Free Software Foundation; either
 0004           ; *  version 2 of the License, or (at your option) any later version.
 0004           ; *
 0004           ; *  This library is distributed in the hope that it will be useful,
 0004           ; *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ; *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 0004           ; *  Library General Public License for more details.
 0004           ; *
 0004           ; *  You should have received a copy of the GNU Library General Public
 0004           ; *  License along with this library; if not, write to the Free
 0004           ; *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 0004           ; *
 0004           ; *  Design Concept
 0004           ; *     transfer info. to string and place into the buffer which pointed by a char pointer
 0004           ; *     support reentrant
 0004           ; *
 0004           ; *  Testing Procedures
 0004           ; *     before you compile, you must copy whole directory of ucliblike8/ to your local home
 0004           ; *     compile this file in linux gcc environment : "make printf.o" in ucliblike8/
 0004           ; *     testing by : "main_compile_dir/printf.o" in ucliblike8/
 0004           ; *
 0004           ; *  Features
 0004           ; *     printf format specific
 0004           ; *             - as left justify
 0004           ; *             0 as pad zero / empty
 0004           ; *             number as width for display
 0004           ; *     print integer & floating point with
 0004           ; *             left justify
 0004           ; *             pad zero / empty
 0004           ; *             width
 0004           ; *             negative num
 0004           ; *             base 10 only
 0004           ; *     floating point
 0004           ; *             range: -99999.0 to 99999.0
 0004           ; *             Maximum decimal digit range: 5 decimal digit
 0004           ; *             Maximum width range=-9 to 9
 0004           ; *             must entry the width no. of decimal point & the width no.of integer
 0004           ; *
 0004           ; *  Examples
 0004           ; *     print_integer
 0004           ; *             display negative number with zero for empty position and 4 digital width
 0004           ; *                     unsigned char vec_buf[6];
 0004           ; *                     print_integer(vec_buf, "04", -45);
 0004           ; *                     printf("%s\n",vec_buf);
 0004           ; *             display number with left justify and 5 digital width
 0004           ; *                     unsigned char vec_buf[6];
 0004           ; *                     print_integer(vec_buf, "-5", 23);
 0004           ; *                     printf("%s\n",vec_buf);
 0004           ; *     print_float
 0004           ; *             display negative number with zero for empty position and 5 digital width, 3 decimal points
 0004           ; *                     unsigned char vec_buf[13];
 0004           ; *                     print_float(vec_buf, "05.3", -13.5);
 0004           ; *                     printf("%s\n",vec_buf);
 0004           ; *             display number with left justify and 5 digital width, 3 decimal points
 0004           ; *                     unsigned char vec_buf[13];
 0004           ; *                     print_float(vec_buf, "-5.2", 23.3);
 0004           ; *                     printf("%s\n",vec_buf);
 0004           ; *
 0004           ; *  Pay Attention
 0004           ; *     MUST input a valid format flag, no chk in coding
 0004           ; *     width data must great than the real width of number
 0004           ; *     MUST provide enough buffer (char* out) to hold the char. data, eg. 3456, must provide 5 bytes including '\0'
 0004           ; *
 0004           ; */
 0004           ; 
 0004           ; #include "printf.h"
 0004           ; 
 0004           ; struct format_flag {
 0004           ;       unsigned        pad_left :1 ;                                                   // 0 - right justify, 1 - left justify
 0004           ;       unsigned        pad_zero :1 ;                                                   // 0 - blank space for empty digit, 1 - '0' for empty digit
 0004           ;       unsigned        neg :1 ;                                                        // 0 - +ve number, 1 - '0' - -ve number
 0004           ;       unsigned        width :5 ;                                                      // max. 32 digit placement
 0004           ; #if (FLOAT==1)
 0004           ; //    signed          width :5;
 0004           ;       unsigned        dp :1 ;                                                         // 0 - no decimal, 1 - have decimal
 0004           ; 
 0004           ;       unsigned        decimal :5 ;                                                    // max. 32 digit placement
 0004           ; 
 0004           ;       unsigned        fulldec :1 ;                                                    // 0 - no full decimal, 1 - full decimal
 0004           ;       unsigned        add_zero :3 ;                                                   // max 8 digit placement
 0004           ; #endif
 0004           ; };
 0004           ; 
 0004           ; struct format_flag format_manipulate(const char* flag_ptr)
 0004           ; {
 0004                   .dbline 93
 0004           ;       struct format_flag flag;
 0004           ; 
 0004           ;       flag.pad_left = 0;
 0004 5200              mov A,[X+0]
 0006 21FE              and A,-2
 0008 5400              mov [X+0],A
 000A                   .dbline 94
 000A           ;       flag.pad_zero = 0;
 000A 5200              mov A,[X+0]
 000C 21FD              and A,-3
 000E 5400              mov [X+0],A
 0010                   .dbline 95
 0010           ;       flag.neg = 0;
 0010 5200              mov A,[X+0]
 0012 21FB              and A,-5
 0014 5400              mov [X+0],A
 0016                   .dbline 96
 0016           ;       flag.width = 0;
 0016 5200              mov A,[X+0]
 0018 2107              and A,7
 001A 5400              mov [X+0],A
 001C                   .dbline 104
 001C 8062              xjmp L6
 001E           L3:
 001E                   .dbline 104
 001E           ; #if (FLOAT==1)
 001E           ;       flag.dp = 0;
 001E           ;       flag.decimal = 0;
 001E           ;       flag.fulldec = 0;
 001E           ;       flag.add_zero = 0;
 001E           ; #endif
 001E           ; 
 001E           ;       for (;*flag_ptr;flag_ptr++) {
 001E                   .dbline 105
 001E 52FA              mov A,[X-6]
 0020 5300              mov [__r1],A
 0022 52F9              mov A,[X-7]
 0024 10                push X
 0025 5800              mov X,[__r1]
 0027 28                romx
 0028 20                pop X
 0029 5402              mov [X+2],A
 002B 560100            mov [X+1],0
 002E 3D0100            cmp [X+1],0
 0031 B006              jnz X1
 0033 3D022D            cmp [X+2],45
 0036 A00D              jz L10
 0038           X1:
 0038 3D0100            cmp [X+1],0
 003B B006              jnz X2
 003D 3D0230            cmp [X+2],48
 0040 A00B              jz L11
 0042           X2:
 0042 8011              xjmp L7
 0044           X0:
 0044                   .dbline 105
 0044           ;               switch (*flag_ptr) {
 0044           L10:
 0044                   .dbline 107
 0044           ;                       case '-' :                                                      // left justify
 0044           ;                                flag.pad_left = 1;
 0044 5200              mov A,[X+0]
 0046 2901              or A,1
 0048 5400              mov [X+0],A
 004A                   .dbline 108
 004A           ;                               break;
 004A 802F              xjmp L8
 004C           L11:
 004C                   .dbline 110
 004C           ;                       case '0' :                                                      // pad zero / empty
 004C           ;                                flag.pad_zero = 1;
 004C 5200              mov A,[X+0]
 004E 2902              or A,2
 0050 5400              mov [X+0],A
 0052                   .dbline 111
 0052           ;                               break;
 0052 8027              xjmp L8
 0054           L7:
 0054                   .dbline 120
 0054           ; #if (FLOAT==1)
 0054           ;                       case '.' :
 0054           ;                                flag.dp= 1;
 0054           ;                                flag_ptr++;
 0054           ;                                flag.decimal = *flag_ptr - '0';
 0054           ;                               break;
 0054           ; #endif
 0054           ;                       default :                                                       // number
 0054           ;                                flag.width = *flag_ptr - '0';
 0054 5200              mov A,[X+0]
 0056 2107              and A,7
 0058 5300              mov [__r0],A
 005A 52FA              mov A,[X-6]
 005C 5300              mov [__r3],A
 005E 52F9              mov A,[X-7]
 0060 10                push X
 0061 5800              mov X,[__r3]
 0063 28                romx
 0064 20                pop X
 0065 5300              mov [__r2],A
 0067 160030            sub [__r2],48
 006A 26001F            and [__r2],31
 006D 5100              mov A,[__r2]
 006F 64                asl A
 0070 64                asl A
 0071 64                asl A
 0072 21F8              and A,-8
 0074 2C00              or [__r0],A
 0076 5100              mov A,[__r0]
 0078 5400              mov [X+0],A
 007A                   .dbline 124
 007A           ;                                // ATTENTION ATTENTION ATTENTION
 007A           ;                                //     this input is programmer job to input a valid number
 007A           ;                                //     we just want to reduce code size and execution speed, so ignore the checking for programming fault, we assume this must be a number
 007A           ;               }
 007A           L8:
 007A                   .dbline 125
 007A           L4:
 007A                   .dbline 104
 007A 77FA              inc [X-6]
 007C 0FF900            adc [X-7],0
 007F           L6:
 007F                   .dbline 104
 007F 52FA              mov A,[X-6]
 0081 5300              mov [__r1],A
 0083 52F9              mov A,[X-7]
 0085 10                push X
 0086 5800              mov X,[__r1]
 0088 28                romx
 0089 20                pop X
 008A 3900              cmp A,0
 008C BF91              jnz L3
 008E                   .dbline 128
 008E           ;       }
 008E           ; 
 008E           ; 
 008E           ;       return flag;
 008E 52FC              mov A,[X-4]
 0090 5300              mov [__r1],A
 0092 5A00              mov [__r3],X
 0094 3E00              mvi A,[__r3]
 0096 3F00              mvi [__r1],A
 0098                   .dbline -2
 0098           L1:
 0098 38FD              add SP,-3
 009A 20                pop X
 009B                   .dbline 0 ; func end
 009B 7F                ret
 009C                   .dbsym l flag 0 X
 009C                   .dbsym l flag_ptr -7 pc
 009C                   .dbend
 009C                   .dbfunc e print_i _print_i fV
 009C           ;            tmp -> X+2
 009C           ;              j -> X+1
 009C           ;        padchar -> X+0
 009C           ;              i -> X-9
 009C           ;           flag -> X-7
 009C           ;            out -> X-5
 009C           _print_i::
 009C                   .dbline -1
 009C 10                push X
 009D 4F                mov X,SP
 009E 3803              add SP,3
 00A0                   .dbline 133
 00A0           ; }
 00A0           ; 
 00A0           ; #if (INTEGER==1)
 00A0           ; void print_i(char* out, struct format_flag flag, int i)
 00A0           ; {
 00A0                   .dbline 141
 00A0           ;       #define base    10
 00A0           ;       char padchar;
 00A0           ; 
 00A0           ; #if (FLOAT==1)
 00A0           ;       if (flag.fulldec) goto next;
 00A0           ; #endif
 00A0           ; 
 00A0           ;       *(out + flag.width--) = '\0';                                                   // place a NULL at the end of string
 00A0 52FA              mov A,[X-6]
 00A2 5300              mov [__r1],A
 00A4 3E00              mvi A,[__r1]
 00A6 5300              mov [__r1],A
 00A8 550000            mov [__r0],0
 00AB 6800              asr [__r0]
 00AD 6E00              rrc [__r1]
 00AF 6800              asr [__r0]
 00B1 6E00              rrc [__r1]
 00B3 6800              asr [__r0]
 00B5 6E00              rrc [__r1]
 00B7 26001F            and [__r1],31
 00BA 260000            and [__r0],0
 00BD 52FA              mov A,[X-6]
 00BF 5300              mov [__r3],A
 00C1 52FA              mov A,[X-6]
 00C3 5300              mov [__r5],A
 00C5 3E00              mvi A,[__r5]
 00C7 5300              mov [__r4],A
 00C9 260007            and [__r4],7
 00CC 5100              mov A,[__r1]
 00CE 1101              sub A,1
 00D0 5300              mov [__r7],A
 00D2 5100              mov A,[__r0]
 00D4 1900              sbb A,0
 00D6 5F0000            mov [__r6],[__r7]
 00D9 26001F            and [__r6],31
 00DC 5100              mov A,[__r6]
 00DE 64                asl A
 00DF 64                asl A
 00E0 64                asl A
 00E1 21F8              and A,-8
 00E3 2C00              or [__r4],A
 00E5 5100              mov A,[__r4]
 00E7 3F00              mvi [__r3],A
 00E9 52FC              mov A,[X-4]
 00EB 0400              add [__r1],A
 00ED 52FB              mov A,[X-5]
 00EF 0C00              adc [__r0],A
 00F1 5000              mov A,0
 00F3 3F00              mvi [__r1],A
 00F5           L13:
 00F5                   .dbline 143
 00F5           ; 
 00F5           ; next: if (i<0) {                                                                      // -ve number
 00F5 52F7              mov A,[X-9]
 00F7 3180              xor A,-128
 00F9 5300              mov [__rY],A
 00FB 5000              mov A,0
 00FD 3180              xor A,-128
 00FF 5300              mov [__rZ],A
 0101 550000            mov [__rX],0
 0104 52F8              mov A,[X-8]
 0106 1100              sub A,0
 0108 2C00              or [__rX],A
 010A 5100              mov A,[__rY]
 010C 1A00              sbb A,[__rZ]
 010E 2C00              or [__rX],A
 0110 D021              jnc L14
 0112 5100              mov A,[__rX]
 0114 A01D              jz L14
 0116           X3:
 0116                   .dbline 143
 0116                   .dbline 144
 0116           ;               i = -i;
 0116 52F8              mov A,[X-8]
 0118 73                cpl A
 0119 11FF              sub A,-1
 011B 54F8              mov [X-8],A
 011D 52F7              mov A,[X-9]
 011F 73                cpl A
 0120 19FF              sbb A,-1
 0122 54F7              mov [X-9],A
 0124                   .dbline 145
 0124           ;               flag.neg = 1;
 0124 52FA              mov A,[X-6]
 0126 5300              mov [__r1],A
 0128 52FA              mov A,[X-6]
 012A 5300              mov [__r3],A
 012C 3E00              mvi A,[__r3]
 012E 2904              or A,4
 0130 3F00              mvi [__r1],A
 0132                   .dbline 146
 0132           ;       }
 0132           L14:
 0132                   .dbline 147
 0132           ;       if (i==0) *(out + flag.width--) = '0';                                          //if i=0
 0132 3DF700            cmp [X-9],0
 0135 B0E6              jnz L19
 0137 3DF800            cmp [X-8],0
 013A B0E1              jnz L19
 013C           X4:
 013C                   .dbline 147
 013C 52FA              mov A,[X-6]
 013E 5300              mov [__r1],A
 0140 3E00              mvi A,[__r1]
 0142 5300              mov [__r1],A
 0144 550000            mov [__r0],0
 0147 6800              asr [__r0]
 0149 6E00              rrc [__r1]
 014B 6800              asr [__r0]
 014D 6E00              rrc [__r1]
 014F 6800              asr [__r0]
 0151 6E00              rrc [__r1]
 0153 26001F            and [__r1],31
 0156 260000            and [__r0],0
 0159 52FA              mov A,[X-6]
 015B 5300              mov [__r3],A
 015D 52FA              mov A,[X-6]
 015F 5300              mov [__r5],A
 0161 3E00              mvi A,[__r5]
 0163 5300              mov [__r4],A
 0165 260007            and [__r4],7
 0168 5100              mov A,[__r1]
 016A 1101              sub A,1
 016C 5300              mov [__r7],A
 016E 5100              mov A,[__r0]
 0170 1900              sbb A,0
 0172 5F0000            mov [__r6],[__r7]
 0175 26001F            and [__r6],31
 0178 5100              mov A,[__r6]
 017A 64                asl A
 017B 64                asl A
 017C 64                asl A
 017D 21F8              and A,-8
 017F 2C00              or [__r4],A
 0181 5100              mov A,[__r4]
 0183 3F00              mvi [__r3],A
 0185 52FC              mov A,[X-4]
 0187 0400              add [__r1],A
 0189 52FB              mov A,[X-5]
 018B 0C00              adc [__r0],A
 018D 5030              mov A,48
 018F 3F00              mvi [__r1],A
 0191 808A              xjmp L19
 0193           L18:
 0193                   .dbline 149
 0193                   .dbline 150
 0193 52FA              mov A,[X-6]
 0195 5300              mov [__r1],A
 0197 3E00              mvi A,[__r1]
 0199 5300              mov [__r1],A
 019B 550000            mov [__r0],0
 019E 6800              asr [__r0]
 01A0 6E00              rrc [__r1]
 01A2 6800              asr [__r0]
 01A4 6E00              rrc [__r1]
 01A6 6800              asr [__r0]
 01A8 6E00              rrc [__r1]
 01AA 26001F            and [__r1],31
 01AD 260000            and [__r0],0
 01B0 52FA              mov A,[X-6]
 01B2 5300              mov [__r3],A
 01B4 52FA              mov A,[X-6]
 01B6 5300              mov [__r5],A
 01B8 3E00              mvi A,[__r5]
 01BA 5300              mov [__r4],A
 01BC 260007            and [__r4],7
 01BF 5100              mov A,[__r1]
 01C1 1101              sub A,1
 01C3 5300              mov [__r7],A
 01C5 5100              mov A,[__r0]
 01C7 1900              sbb A,0
 01C9 5F0000            mov [__r6],[__r7]
 01CC 26001F            and [__r6],31
 01CF 5100              mov A,[__r6]
 01D1 64                asl A
 01D2 64                asl A
 01D3 64                asl A
 01D4 21F8              and A,-8
 01D6 2C00              or [__r4],A
 01D8 5100              mov A,[__r4]
 01DA 3F00              mvi [__r3],A
 01DC 52FC              mov A,[X-4]
 01DE 0400              add [__r1],A
 01E0 52FB              mov A,[X-5]
 01E2 0C00              adc [__r0],A
 01E4 5000              mov A,0
 01E6 08                push A
 01E7 500A              mov A,10
 01E9 08                push A
 01EA 52F7              mov A,[X-9]
 01EC 08                push A
 01ED 52F8              mov A,[X-8]
 01EF 08                push A
 01F0 7C0000            xcall __divmod_16X16_16
 01F3 38FE              add SP,-2
 01F5 18                pop A
 01F6 5300              mov [__r3],A
 01F8 18                pop A
 01F9 5300              mov [__r2],A
 01FB 060030            add [__r3],48
 01FE 0E0000            adc [__r2],0
 0201 5100              mov A,[__r3]
 0203 3F00              mvi [__r1],A
 0205                   .dbline 151
 0205 5000              mov A,0
 0207 08                push A
 0208 500A              mov A,10
 020A 08                push A
 020B 52F7              mov A,[X-9]
 020D 08                push A
 020E 52F8              mov A,[X-8]
 0210 08                push A
 0211 7C0000            xcall __divmod_16X16_16
 0214 18                pop A
 0215 54F8              mov [X-8],A
 0217 18                pop A
 0218 54F7              mov [X-9],A
 021A 38FE              add SP,-2
 021C                   .dbline 152
 021C           L19:
 021C                   .dbline 149
 021C           ; 
 021C           ;       while (i) {                                                                     // convert the integer number to string
 021C 3DF700            cmp [X-9],0
 021F BF73              jnz L18
 0221 3DF800            cmp [X-8],0
 0224 BF6E              jnz L18
 0226           X5:
 0226                   .dbline 153
 0226           ;               *(out + flag.width--) = (i % base) + '0';
 0226           ;               i /= base;
 0226           ;       }
 0226           ;       if (flag.neg) *(out + flag.width--) = '-';
 0226 52FA              mov A,[X-6]
 0228 5300              mov [__r1],A
 022A 3E00              mvi A,[__r1]
 022C 5300              mov [__r0],A
 022E 6800              asr [__r0]
 0230 6800              asr [__r0]
 0232 260001            and [__r0],1
 0235 A056              jz L21
 0237                   .dbline 153
 0237 52FA              mov A,[X-6]
 0239 5300              mov [__r1],A
 023B 3E00              mvi A,[__r1]
 023D 5300              mov [__r1],A
 023F 550000            mov [__r0],0
 0242 6800              asr [__r0]
 0244 6E00              rrc [__r1]
 0246 6800              asr [__r0]
 0248 6E00              rrc [__r1]
 024A 6800              asr [__r0]
 024C 6E00              rrc [__r1]
 024E 26001F            and [__r1],31
 0251 260000            and [__r0],0
 0254 52FA              mov A,[X-6]
 0256 5300              mov [__r3],A
 0258 52FA              mov A,[X-6]
 025A 5300              mov [__r5],A
 025C 3E00              mvi A,[__r5]
 025E 5300              mov [__r4],A
 0260 260007            and [__r4],7
 0263 5100              mov A,[__r1]
 0265 1101              sub A,1
 0267 5300              mov [__r7],A
 0269 5100              mov A,[__r0]
 026B 1900              sbb A,0
 026D 5F0000            mov [__r6],[__r7]
 0270 26001F            and [__r6],31
 0273 5100              mov A,[__r6]
 0275 64                asl A
 0276 64                asl A
 0277 64                asl A
 0278 21F8              and A,-8
 027A 2C00              or [__r4],A
 027C 5100              mov A,[__r4]
 027E 3F00              mvi [__r3],A
 0280 52FC              mov A,[X-4]
 0282 0400              add [__r1],A
 0284 52FB              mov A,[X-5]
 0286 0C00              adc [__r0],A
 0288 502D              mov A,45
 028A 3F00              mvi [__r1],A
 028C           L21:
 028C                   .dbline 166
 028C           ; 
 028C           ; #if (FLOAT==1)
 028C           ;       for(;flag.add_zero;flag.add_zero--){                                            // add zero for 1.005,1.05,1.012 etc
 028C           ;               *(out + flag.width--) = '0';
 028C           ;       }
 028C           ; 
 028C           ;       if (flag.dp) {
 028C           ;               *(out + flag.width--) = '.';
 028C           ;               goto complete;
 028C           ;       }
 028C           ; #endif
 028C           ; 
 028C           ;       if (++flag.width) {                                                             // if not fit to width, place something in the space
 028C 52FA              mov A,[X-6]
 028E 5300              mov [__r1],A
 0290 3E00              mvi A,[__r1]
 0292 5300              mov [__r1],A
 0294 550000            mov [__r0],0
 0297 5300              mov [__r3],A
 0299 550000            mov [__r2],0
 029C 6800              asr [__r2]
 029E 6E00              rrc [__r3]
 02A0 6800              asr [__r2]
 02A2 6E00              rrc [__r3]
 02A4 6800              asr [__r2]
 02A6 6E00              rrc [__r3]
 02A8 26001F            and [__r3],31
 02AB 260000            and [__r2],0
 02AE 060001            add [__r3],1
 02B1 0E0000            adc [__r2],0
 02B4 550000            mov [__r2],0
 02B7 26001F            and [__r3],31
 02BA 260000            and [__r2],0
 02BD 52FA              mov A,[X-6]
 02BF 5300              mov [__r5],A
 02C1 260007            and [__r1],7
 02C4 2600FF            and [__r0],-1
 02C7 5F0000            mov [__r7],[__r3]
 02CA 5F0000            mov [__r6],[__r2]
 02CD 6500              asl [__r7]
 02CF 6B00              rlc [__r6]
 02D1 6500              asl [__r7]
 02D3 6B00              rlc [__r6]
 02D5 6500              asl [__r7]
 02D7 6B00              rlc [__r6]
 02D9 2600F8            and [__r7],-8
 02DC 260000            and [__r6],0
 02DF 5100              mov A,[__r7]
 02E1 2C00              or [__r1],A
 02E3 5100              mov A,[__r6]
 02E5 2C00              or [__r0],A
 02E7 5100              mov A,[__r1]
 02E9 3F00              mvi [__r5],A
 02EB 3C0000            cmp [__r2],0
 02EE B006              jnz X6
 02F0 3C0000            cmp [__r3],0
 02F3 A1E7              jz L23
 02F5           X6:
 02F5                   .dbline 166
 02F5                   .dbline 171
 02F5           ;                                                                                       //      since the above ++flag.width, so i must adjust back to right position
 02F5           ; //    printf("flagwidth=%d\n",flag.width);                                            //check point only
 02F5           ; 
 02F5           ; 
 02F5           ;               if (flag.pad_left) {                                                    // left justify and width value > real width
 02F5 52FA              mov A,[X-6]
 02F7 5300              mov [__r1],A
 02F9 3E00              mvi A,[__r1]
 02FB 5300              mov [__r0],A
 02FD 260001            and [__r0],1
 0300 A058              jz L25
 0302                   .dbline 171
 0302                   .dbline 172
 0302           ;                       unsigned char j = 0;                                            //      adding one to flag.width 1st, because
 0302 560100            mov [X+1],0
 0305           L27:
 0305                   .dbline 174
 0305           ;                       char tmp;                                                       //      if fit of digial placement, ++flag.width == 0
 0305           ;                       do {
 0305                   .dbline 175
 0305           ;                               tmp = *(out + flag.width + j);
 0305 5201              mov A,[X+1]
 0307 5300              mov [__r1],A
 0309 550000            mov [__r0],0
 030C 52FA              mov A,[X-6]
 030E 5300              mov [__r3],A
 0310 3E00              mvi A,[__r3]
 0312 5300              mov [__r3],A
 0314 550000            mov [__r2],0
 0317 6800              asr [__r2]
 0319 6E00              rrc [__r3]
 031B 6800              asr [__r2]
 031D 6E00              rrc [__r3]
 031F 6800              asr [__r2]
 0321 6E00              rrc [__r3]
 0323 26001F            and [__r3],31
 0326 260000            and [__r2],0
 0329 52FC              mov A,[X-4]
 032B 0400              add [__r3],A
 032D 52FB              mov A,[X-5]
 032F 0C00              adc [__r2],A
 0331 5100              mov A,[__r3]
 0333 0400              add [__r1],A
 0335 5100              mov A,[__r2]
 0337 0C00              adc [__r0],A
 0339 3E00              mvi A,[__r1]
 033B 5402              mov [X+2],A
 033D                   .dbline 176
 033D           ;                               *(out + j) = tmp;
 033D 5201              mov A,[X+1]
 033F 5300              mov [__r1],A
 0341 550000            mov [__r0],0
 0344 52FC              mov A,[X-4]
 0346 0400              add [__r1],A
 0348 52FB              mov A,[X-5]
 034A 0C00              adc [__r0],A
 034C 5202              mov A,[X+2]
 034E 3F00              mvi [__r1],A
 0350                   .dbline 177
 0350           ;                               j++;
 0350 7701              inc [X+1]
 0352                   .dbline 178
 0352           L28:
 0352                   .dbline 178
 0352           ;                       } while (tmp);                                                  //      chk '\0'
 0352 3D0200            cmp [X+2],0
 0355 BFAF              jnz L27
 0357                   .dbline 179
 0357 8183              xjmp L26
 0359           L25:
 0359                   .dbline 179
 0359           ;               } else {
 0359                   .dbline 180
 0359 52FA              mov A,[X-6]
 035B 5300              mov [__r1],A
 035D 3E00              mvi A,[__r1]
 035F 5300              mov [__r1],A
 0361 550000            mov [__r0],0
 0364 5300              mov [__r3],A
 0366 550000            mov [__r2],0
 0369 6800              asr [__r2]
 036B 6E00              rrc [__r3]
 036D 6800              asr [__r2]
 036F 6E00              rrc [__r3]
 0371 260001            and [__r3],1
 0374 260000            and [__r2],0
 0377 B006              jnz X7
 0379 3C0000            cmp [__r3],0
 037C A012              jz L32
 037E           X7:
 037E 6800              asr [__r0]
 0380 6E00              rrc [__r1]
 0382 260001            and [__r1],1
 0385 260000            and [__r0],0
 0388 B062              jnz L30
 038A 3C0000            cmp [__r1],0
 038D B05D              jnz L30
 038F           X8:
 038F           L32:
 038F                   .dbline 180
 038F           ;                       if ((!flag.neg)||(!flag.pad_zero)) flag.width--;
 038F 52FA              mov A,[X-6]
 0391 5300              mov [__r1],A
 0393 3E00              mvi A,[__r1]
 0395 5300              mov [__r1],A
 0397 550000            mov [__r0],0
 039A 52FA              mov A,[X-6]
 039C 5300              mov [__r3],A
 039E 5100              mov A,[__r1]
 03A0 2107              and A,7
 03A2 5300              mov [__r5],A
 03A4 5000              mov A,0
 03A6 21FF              and A,-1
 03A8 5300              mov [__r4],A
 03AA 6800              asr [__r0]
 03AC 6E00              rrc [__r1]
 03AE 6800              asr [__r0]
 03B0 6E00              rrc [__r1]
 03B2 6800              asr [__r0]
 03B4 6E00              rrc [__r1]
 03B6 26001F            and [__r1],31
 03B9 260000            and [__r0],0
 03BC 160001            sub [__r1],1
 03BF 1E0000            sbb [__r0],0
 03C2 550000            mov [__r0],0
 03C5 26001F            and [__r1],31
 03C8 260000            and [__r0],0
 03CB 6500              asl [__r1]
 03CD 6B00              rlc [__r0]
 03CF 6500              asl [__r1]
 03D1 6B00              rlc [__r0]
 03D3 6500              asl [__r1]
 03D5 6B00              rlc [__r0]
 03D7 2600F8            and [__r1],-8
 03DA 260000            and [__r0],0
 03DD 5100              mov A,[__r5]
 03DF 2A00              or A,[__r1]
 03E1 5300              mov [__r1],A
 03E3 5100              mov A,[__r4]
 03E5 2A00              or A,[__r0]
 03E7 5100              mov A,[__r1]
 03E9 3F00              mvi [__r3],A
 03EB           L30:
 03EB                   .dbline 181
 03EB           ;                       if (flag.pad_zero) padchar = '0';                               // place zero for empty space and width value > real width
 03EB 52FA              mov A,[X-6]
 03ED 5300              mov [__r1],A
 03EF 3E00              mvi A,[__r1]
 03F1 5300              mov [__r0],A
 03F3 70FB              and F,-5
 03F5 6E00              rrc [__r0]
 03F7 260001            and [__r0],1
 03FA A006              jz L33
 03FC                   .dbline 181
 03FC 560030            mov [X+0],48
 03FF 8004              xjmp L34
 0401           L33:
 0401                   .dbline 182
 0401           ;                       else padchar = ' ';
 0401 560020            mov [X+0],32
 0404           L34:
 0404           L35:
 0404                   .dbline 183
 0404           ;                       do {
 0404                   .dbline 184
 0404           ;                               *(out + flag.width) = padchar;
 0404 52FA              mov A,[X-6]
 0406 5300              mov [__r1],A
 0408 3E00              mvi A,[__r1]
 040A 5300              mov [__r1],A
 040C 550000            mov [__r0],0
 040F 6800              asr [__r0]
 0411 6E00              rrc [__r1]
 0413 6800              asr [__r0]
 0415 6E00              rrc [__r1]
 0417 6800              asr [__r0]
 0419 6E00              rrc [__r1]
 041B 26001F            and [__r1],31
 041E 260000            and [__r0],0
 0421 52FC              mov A,[X-4]
 0423 0400              add [__r1],A
 0425 52FB              mov A,[X-5]
 0427 0C00              adc [__r0],A
 0429 5200              mov A,[X+0]
 042B 3F00              mvi [__r1],A
 042D                   .dbline 185
 042D           ;                               if (flag.width) flag.width--;
 042D 52FA              mov A,[X-6]
 042F 5300              mov [__r1],A
 0431 3E00              mvi A,[__r1]
 0433 67                asr A
 0434 67                asr A
 0435 67                asr A
 0436 211F              and A,31
 0438 5300              mov [__r0],A
 043A 26001F            and [__r0],31
 043D A05F              jz L37
 043F                   .dbline 185
 043F 52FA              mov A,[X-6]
 0441 5300              mov [__r1],A
 0443 3E00              mvi A,[__r1]
 0445 5300              mov [__r1],A
 0447 550000            mov [__r0],0
 044A 52FA              mov A,[X-6]
 044C 5300              mov [__r3],A
 044E 5100              mov A,[__r1]
 0450 2107              and A,7
 0452 5300              mov [__r5],A
 0454 5000              mov A,0
 0456 21FF              and A,-1
 0458 5300              mov [__r4],A
 045A 6800              asr [__r0]
 045C 6E00              rrc [__r1]
 045E 6800              asr [__r0]
 0460 6E00              rrc [__r1]
 0462 6800              asr [__r0]
 0464 6E00              rrc [__r1]
 0466 26001F            and [__r1],31
 0469 260000            and [__r0],0
 046C 160001            sub [__r1],1
 046F 1E0000            sbb [__r0],0
 0472 550000            mov [__r0],0
 0475 26001F            and [__r1],31
 0478 260000            and [__r0],0
 047B 6500              asl [__r1]
 047D 6B00              rlc [__r0]
 047F 6500              asl [__r1]
 0481 6B00              rlc [__r0]
 0483 6500              asl [__r1]
 0485 6B00              rlc [__r0]
 0487 2600F8            and [__r1],-8
 048A 260000            and [__r0],0
 048D 5100              mov A,[__r5]
 048F 2A00              or A,[__r1]
 0491 5300              mov [__r1],A
 0493 5100              mov A,[__r4]
 0495 2A00              or A,[__r0]
 0497 5100              mov A,[__r1]
 0499 3F00              mvi [__r3],A
 049B                   .dbline 186
 049B           ;                               else break;
 049B           L39:
 049B                   .dbline 187
 049B           L36:
 049B                   .dbline 187
 049B           ;                       } while (1);
 049B 8F68              xjmp L35
 049D           L37:
 049D                   .dbline 188
 049D           ;                       if ((flag.neg)&&(flag.pad_zero)) *out = '-';                    //      should be *(out + flag.width), but flag.width must be zere
 049D 52FA              mov A,[X-6]
 049F 5300              mov [__r1],A
 04A1 3E00              mvi A,[__r1]
 04A3 5300              mov [__r1],A
 04A5 550000            mov [__r0],0
 04A8 5300              mov [__r3],A
 04AA 550000            mov [__r2],0
 04AD 6800              asr [__r2]
 04AF 6E00              rrc [__r3]
 04B1 6800              asr [__r2]
 04B3 6E00              rrc [__r3]
 04B5 260001            and [__r3],1
 04B8 260000            and [__r2],0
 04BB B006              jnz X9
 04BD 3C0000            cmp [__r3],0
 04C0 A01A              jz L40
 04C2           X9:
 04C2 6800              asr [__r0]
 04C4 6E00              rrc [__r1]
 04C6 260001            and [__r1],1
 04C9 260000            and [__r0],0
 04CC B006              jnz X10
 04CE 3C0000            cmp [__r1],0
 04D1 A009              jz L40
 04D3           X10:
 04D3                   .dbline 188
 04D3 52FC              mov A,[X-4]
 04D5 5300              mov [__r1],A
 04D7 502D              mov A,45
 04D9 3F00              mvi [__r1],A
 04DB           L40:
 04DB                   .dbline 189
 04DB           ;               }
 04DB           L26:
 04DB                   .dbline 190
 04DB           L23:
 04DB                   .dbline -2
 04DB                   .dbline 194
 04DB           ;       }
 04DB           ; #if (FLOAT==1)
 04DB           ; complete:             flag.dp=0;
 04DB           ; #endif
 04DB           ; }
 04DB           L12:
 04DB 38FD              add SP,-3
 04DD 20                pop X
 04DE                   .dbline 0 ; func end
 04DE 7F                ret
 04DF                   .dbsym l tmp 2 c
 04DF                   .dbsym l j 1 c
 04DF                   .dbsym l padchar 0 c
 04DF                   .dbsym l i -9 I
 04DF                   .dbsym l flag -7 pX
 04DF                   .dbsym l out -5 pc
 04DF                   .dbend
 04DF                   .dbfunc e print_integer _print_integer fV
 04DF           ;              i -> X-9
 04DF           ;       flag_ptr -> X-7
 04DF           ;            out -> X-5
 04DF           _print_integer::
 04DF                   .dbline -1
 04DF 10                push X
 04E0 4F                mov X,SP
 04E1 3801              add SP,1
 04E3                   .dbline 198
 04E3           ; 
 04E3           ; 
 04E3           ; void print_integer(char* out, const char* flag_ptr, int i)
 04E3           ; {
 04E3                   .dbline 199
 04E3           ;       print_i(out,format_manipulate(flag_ptr),i);
 04E3 52F9              mov A,[X-7]
 04E5 08                push A
 04E6 52FA              mov A,[X-6]
 04E8 08                push A
 04E9 5100              mov A,[__r0]
 04EB 08                push A
 04EC 10                push X
 04ED 9B11              xcall _format_manipulate
 04EF 52F7              mov A,[X-9]
 04F1 08                push A
 04F2 52F8              mov A,[X-8]
 04F4 08                push A
 04F5 5100              mov A,[__r0]
 04F7 08                push A
 04F8 10                push X
 04F9 52FB              mov A,[X-5]
 04FB 08                push A
 04FC 52FC              mov A,[X-4]
 04FE 08                push A
 04FF 9B9B              xcall _print_i
 0501 38F6              add SP,-10
 0503                   .dbline -2
 0503                   .dbline 200
 0503           ; }
 0503           L42:
 0503 38FF              add SP,-1
 0505 20                pop X
 0506                   .dbline 0 ; func end
 0506 7F                ret
 0507                   .dbsym l i -9 I
 0507                   .dbsym l flag_ptr -7 pc
 0507                   .dbsym l out -5 pc
 0507                   .dbend
