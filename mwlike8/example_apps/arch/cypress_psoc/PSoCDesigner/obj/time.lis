                        .module time.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./interrupt.h
 0000                   .dbfunc s mark_bh _mark_bh fV
 0000           ;             nr -> X-4
 0000           _mark_bh:
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002                   .dbline 22
 0002           ; /*
 0002           ;  *    arch/cypress_psoc/kernel/time.c
 0002           ;  *
 0002           ;  *    23-04-2004      yan     create this following linux arch but using cypress psoc hardware related codes
 0002           ;  *
 0002           ;  */
 0002           ; 
 0002           ; #include <m8c.h>                                                                      // part specific constants and macros
 0002           ; #include "PSoCAPI.h"                                                                  // PSoC API definitions for all User Modules
 0002           ; 
 0002           ; #include "app.h"
 0002           ; #include "sched.h"
 0002           ; #include "interrupt.h"                                                                        // do_softirq
 0002           ; #include "gpio.h"                                                                     // gpio_var.timer_10msec_f
 0002           ; 
 0002           ; extern void do_IRQ(void);
 0002           ; 
 0002           ; #if (TIMER_MOD==1)
 0002           ; void time_init(void)
 0002           ; {
 0002           ;         Timer8_1_EnableInt();                                                         // start 8-bit Timer, 5mS for one interrupt
 0002           ;         Timer8_1_Start();
 0002                   .dbline 23
 0002           ; }
 0002 550001            mov [__r0],1
 0005 52FC              mov A,[X-4]
 0007 2107              and A,7
 0009 A006              jz X0
 000B           X1:
 000B 6500              asl [__r0]
 000D 78                dec A
 000E BFFC              jnz X1
 0010           X0:
 0010 5100              mov A,[_softirq_vec]
 0012 2A00              or A,[__r0]
 0014 5300              mov [_softirq_vec],A
 0016                   .dbline -2
 0016                   .dbline 24
 0016           ; #endif
 0016           L2:
 0016 20                pop X
 0017                   .dbline 0 ; func end
 0017 7F                ret
 0018                   .dbsym l nr -4 c
 0018                   .dbend
 0018                   .dbfile ./time.c
 0018                   .dbfunc e time_init _time_init fV
 0018           _time_init::
 0018                   .dbline -1
 0018                   .dbline 20
 0018                   .dbline 21
 0018 10                push X
 0019 7C0000            xcall _Timer8_1_EnableInt
 001C                   .dbline 22
 001C 7C0000            xcall _Timer8_1_Start
 001F 20                pop X
 0020                   .dbline -2
 0020                   .dbline 23
 0020           L3:
 0020                   .dbline 0 ; func end
 0020 7F                ret
 0021                   .dbend
 0021                   .dbfunc e timer_interrupt _timer_interrupt fV
 0021           _timer_interrupt::
 0021                   .dbline -1
 0021 08                push A
 0022 5100              mov A,[__r0]
 0024 08                push A
 0025 5100              mov A,[__r1]
 0027 08                push A
 0028 5100              mov A,[__r2]
 002A 08                push A
 002B 5100              mov A,[__r3]
 002D 08                push A
 002E 5100              mov A,[__r4]
 0030 08                push A
 0031 5100              mov A,[__r5]
 0033 08                push A
 0034 5100              mov A,[__r6]
 0036 08                push A
 0037 5100              mov A,[__r7]
 0039 08                push A
 003A 5100              mov A,[__r8]
 003C 08                push A
 003D 5100              mov A,[__r9]
 003F 08                push A
 0040 5100              mov A,[__r10]
 0042 08                push A
 0043 5100              mov A,[__r11]
 0045 08                push A
 0046 5100              mov A,[__rX]
 0048 08                push A
 0049 5100              mov A,[__rY]
 004B 08                push A
 004C 5100              mov A,[__rZ]
 004E 08                push A
 004F                   .dbline 28
 004F           ; 
 004F           ; #pragma       interrupt_handler       timer_interrupt                                         // shouald add this isr name at boot.asm from PSoC Designer
 004F           ; void timer_interrupt(void)                                                            // timer interrupt
 004F           ; {                                                                                     //      this code must under disable interrupt state in cypress_psoc
 004F                   .dbline 30
 004F           ; #if (TIMER_MOD==1)
 004F           ;       if (gpio_var.timer_10msec_f) {                                                  //      since reduce usage of cypress digital block, using a timer8, that it only support to 5mSec each interrupt, but i need 10mSec
 004F 5100              mov A,[_gpio_var]
 0051 2101              and A,1
 0053 A047              jz L5
 0055                   .dbline 30
 0055                   .dbline 33
 0055           ;       //if (chk_timer_int_ctrl) {
 0055           ;               //inv_timer_int_ctrl;                                                   
 0055           ;               gpio_var.timer_10msec_f ^= 1;                                           //      must do it 1st, since it will switch to other process
 0055 5F0000            mov [__r1],[_gpio_var]
 0058 550000            mov [__r0],0
 005B 550000            mov [__r3],<_gpio_var
 005E 5100              mov A,[__r1]
 0060 21FE              and A,-2
 0062 5300              mov [__r5],A
 0064 5000              mov A,0
 0066 21FF              and A,-1
 0068 5300              mov [__r4],A
 006A 260001            and [__r1],1
 006D 260000            and [__r0],0
 0070 360001            xor [__r1],1
 0073 360000            xor [__r0],0
 0076 550000            mov [__r0],0
 0079 260001            and [__r1],1
 007C 260000            and [__r0],0
 007F 260001            and [__r1],1
 0082 260000            and [__r0],0
 0085 5100              mov A,[__r5]
 0087 2A00              or A,[__r1]
 0089 5300              mov [__r1],A
 008B 5100              mov A,[__r4]
 008D 2A00              or A,[__r0]
 008F 5100              mov A,[__r1]
 0091 3F00              mvi [__r3],A
 0093                   .dbline 34
 0093           ;               do_timer();                                                             //      should in do_timer_interrupt(), timer interrupt code, need to complete in short time
 0093 7C0000            xcall _do_timer
 0096                   .dbline 35
 0096           ;               do_softirq();                                                           //      botton half of interrupt, if needed, enable interrupt in 2nd-half
 0096 7C0000            xcall _do_softirq
 0099                   .dbline 36
 0099 803F              xjmp L6
 009B           L5:
 009B                   .dbline 36
 009B 5F0000            mov [__r1],[_gpio_var]
 009E 550000            mov [__r0],0
 00A1 550000            mov [__r3],<_gpio_var
 00A4 5100              mov A,[__r1]
 00A6 21FE              and A,-2
 00A8 5300              mov [__r5],A
 00AA 5000              mov A,0
 00AC 21FF              and A,-1
 00AE 5300              mov [__r4],A
 00B0 260001            and [__r1],1
 00B3 260000            and [__r0],0
 00B6 360001            xor [__r1],1
 00B9 360000            xor [__r0],0
 00BC 550000            mov [__r0],0
 00BF 260001            and [__r1],1
 00C2 260000            and [__r0],0
 00C5 260001            and [__r1],1
 00C8 260000            and [__r0],0
 00CB 5100              mov A,[__r5]
 00CD 2A00              or A,[__r1]
 00CF 5300              mov [__r1],A
 00D1 5100              mov A,[__r4]
 00D3 2A00              or A,[__r0]
 00D5 5100              mov A,[__r1]
 00D7 3F00              mvi [__r3],A
 00D9           L6:
 00D9                   .dbline -2
 00D9                   .dbline 39
 00D9           ;       } else gpio_var.timer_10msec_f ^= 1;
 00D9           ;       //} else inv_timer_int_ctrl;
 00D9           ; #endif
 00D9           ; }                                                                                     //      auto enable interrupt again after isr in cypress_psoc
 00D9           L4:
 00D9 18                pop A
 00DA 5300              mov [__rZ],A
 00DC 18                pop A
 00DD 5300              mov [__rY],A
 00DF 18                pop A
 00E0 5300              mov [__rX],A
 00E2 18                pop A
 00E3 5300              mov [__r11],A
 00E5 18                pop A
 00E6 5300              mov [__r10],A
 00E8 18                pop A
 00E9 5300              mov [__r9],A
 00EB 18                pop A
 00EC 5300              mov [__r8],A
 00EE 18                pop A
 00EF 5300              mov [__r7],A
 00F1 18                pop A
 00F2 5300              mov [__r6],A
 00F4 18                pop A
 00F5 5300              mov [__r5],A
 00F7 18                pop A
 00F8 5300              mov [__r4],A
 00FA 18                pop A
 00FB 5300              mov [__r3],A
 00FD 18                pop A
 00FE 5300              mov [__r2],A
 0100 18                pop A
 0101 5300              mov [__r1],A
 0103 18                pop A
 0104 5300              mov [__r0],A
 0106 18                pop A
 0107                   .dbline 0 ; func end
 0107 7E                reti
 0108                   .dbend
