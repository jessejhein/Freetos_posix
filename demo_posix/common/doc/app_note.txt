APPLICATION NOTES
-----------------

TRISbits
=========
When peripherial modules (e.g UART, I2C, etc) are used, the corresponding TRISbits 
should be kept set to 1 (i.e. input). For example,
	void vSetupHardware( void ){
		TRISF &= 0x003C;	//UART1 and UART2
		TRISG &= 0x000C;	//I2C
		TRISG &= 0x03C0;	//SPI
	}
Related Known Problems:
1) When the IO pins for UARTs are set to output, (TRISbits = 0), after a software
   reset, the bootloader using the UART will initially sent 0x00 and 0xd5 instead 
   of just 0x55.

ACCESS TO IO
============
Theoretically, IO Port can be accessed using
1) 	LAT registers (e.g. LATC, LATD, etc)
2) 	PORT registers (e.g. PORTC, PORTD, etc)
3) 	_R$ (e.g. _RC15, _RD14 etc)

User should follow the guidelines below whenever possible:
1) 	Read/Write data to the whole port rather than the individual pin, especially
	when the pins on the same port are used in close proximity
2) 	Write to LAT
3) 	Read from PORT

SWITCHING FROM INPUT TO OUPUT
=============================
When a port is switch from INPUT to OUTPUT, the port will retain its values
for some time. To ensure proper output, reset the port value to zero before
writing a new valid value to the port. For example,
	TRISD = 0xFFFF;	//port D is input
	//Do something
	TRISD = 0x0000; //port D is now output
	LATD = 0x0000; //clear port D
	//You can now write a valid output now
	
