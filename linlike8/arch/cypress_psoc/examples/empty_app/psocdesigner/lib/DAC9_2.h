//*****************************************************************************
//*****************************************************************************
//  FILENAME: DAC9_2.h
//   Version: 2.2, Updated on 2005/01/10 at 15:18:40
//  Generated by PSoC Designer ver 4.2  b1013 : 02 September, 2004
//
//  DESCRIPTION: DAC9 User Module C Language interface file for the
//               22/24/25/26/27/29xxx PSoC family of devices.
//
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

//-------------------------------------------------
// Defines for DAC9_2 API's.
//-------------------------------------------------
// Power Setting Defines
#define DAC9_2_OFF                 0
#define DAC9_2_LOWPOWER            1
#define DAC9_2_MEDPOWER            2
#define DAC9_2_HIGHPOWER           3
#define DAC9_2_FULLPOWER           3

// Define constants for declaring function prototypes based on DataFormat parameter
#define DAC9_2_OffsetBinary            0x04
#define DAC9_2_TwosComplement          0x02
#define DAC9_2_SignAndMagnitude        0x01
#define DAC9_2_RawRegister             0x00
#define DAC9_2_DATAFORMAT          0x7
#define DAC9_2_OFFSETBINARY        DAC9_2_DATAFORMAT & DAC9_2_OffsetBinary
#define DAC9_2_TWOSCOMPLEMENT      DAC9_2_DATAFORMAT & DAC9_2_TwosComplement
#define DAC9_2_SIGNANDMAGNITUDE    DAC9_2_DATAFORMAT & DAC9_2_SignAndMagnitude

// Declare function fastcall16 pragmas
#pragma fastcall16 DAC9_2_Start
#pragma fastcall16 DAC9_2_SetPower
#pragma fastcall16 DAC9_2_Stop

//-------------------------------------------------
// Prototypes of the DAC9_2 API.
//-------------------------------------------------
extern void  DAC9_2_Start(BYTE bPowerSetting);
extern void  DAC9_2_SetPower(BYTE bPowerSetting);
extern void  DAC9_2_Stop(void);

// Declare overloaded functions based on DataForamt parameter selected
#if DAC9_2_OFFSETBINARY
   #pragma fastcall16 DAC9_2_WriteBlind
   #pragma fastcall16 DAC9_2_WriteStall
   extern void  DAC9_2_WriteBlind(WORD wOutputValue);
   extern void  DAC9_2_WriteStall(WORD wOutputValue);
#else
   #if DAC9_2_TWOSCOMPLEMENT
      #pragma fastcall16 DAC9_2_WriteBlind
      #pragma fastcall16 DAC9_2_WriteStall
      extern void  DAC9_2_WriteBlind(INT iOutputValue);
      extern void  DAC9_2_WriteStall(INT iOutputValue);
   #else    //DAC9_2_SIGNANDMAGNITUDE
      #pragma fastcall16 DAC9_2_WriteBlind2B
      #pragma fastcall16 DAC9_2_WriteStall2B
      extern void  DAC9_2_WriteBlind2B(BYTE bLSB, BYTE bMSB);
      extern void  DAC9_2_WriteStall2B(BYTE bLSB, BYTE bMSB);
   #endif
#endif

//-------------------------------------------------
// Hardware Addresses for DAC9_2
//-------------------------------------------------

#pragma ioport  DAC9_2_LSB_CR0: 0x08c                      // LSB Analog control register 0
BYTE            DAC9_2_LSB_CR0;
#pragma ioport  DAC9_2_LSB_CR1: 0x08d                      // LSB Analog control register 1
BYTE            DAC9_2_LSB_CR1;
#pragma ioport  DAC9_2_LSB_CR2: 0x08e                      // LSB Analog control register 2
BYTE            DAC9_2_LSB_CR2;
#pragma ioport  DAC9_2_LSB_CR3: 0x08f                      // LSB Analog control register 3
BYTE            DAC9_2_LSB_CR3;

#pragma ioport  DAC9_2_MSB_CR0: 0x09c                      // MSB Analog control register 0
BYTE            DAC9_2_MSB_CR0;
#pragma ioport  DAC9_2_MSB_CR1: 0x09d                      // MSB Analog control register 1
BYTE            DAC9_2_MSB_CR1;
#pragma ioport  DAC9_2_MSB_CR2: 0x09e                      // MSB Analog control register 2
BYTE            DAC9_2_MSB_CR2;
#pragma ioport  DAC9_2_MSB_CR3: 0x09f                      // MSB Analog control register 3
BYTE            DAC9_2_MSB_CR3;

// end of file DAC9_2.h
