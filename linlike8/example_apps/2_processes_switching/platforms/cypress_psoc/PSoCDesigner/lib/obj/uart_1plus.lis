                ;;*****************************************************************************
                ;;*****************************************************************************
                ;;  FILENAME:   UART_1Plus.asm
                ;;  Version: 4.2, Updated on 2003/11/18 at 15:02:35
                ;;  Generated by PSoC Designer ver 4.1 b931 : 21 January, 2004
                ;;
                ;;  DESCRIPTION:
                ;;   Optional higher level firmware for the UART User Module.  Implemented
                ;;   for the 22/24/25/26/27xxx families.
                ;;
                ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
                ;;        arguments and observe the associated "Registers are volatile" policy.
                ;;        This means it is the caller's responsibility to preserve any values
                ;;        in the X and A registers that are still needed after the API
                ;;        function returns. Even though these registers may be preserved now,
                ;;        there is no guarantee they will be preserved in future releases.
                ;;-----------------------------------------------------------------------------
                ;;  Copyright (c) Cypress MicroSystems 2003. All Rights Reserved.
                ;;*****************************************************************************
                ;;*****************************************************************************
                
                
                ;-----------------------------------------------
                ; include instance specific register definitions
                ;-----------------------------------------------
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00FE           CPU_SCR1:     equ FEh          ; CPU Status and Control Register #1       (#)
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DE           OSC_CR4:      equ DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_3V0_POR:       equ 00h    ; MASK: Set the Precision POR to 3.0V
 0010           VLT_CR_4V5_POR:       equ 10h    ; MASK: Set the Precision POR to 4.5V
 0020           VLT_CR_4V75_POR:      equ 20h    ; MASK: Set the Precision POR to 4.75V
 0030           VLT_CR_DISABLE:       equ 30h    ; MASK: Disable the Precision POR
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_PUMP:         equ 08h    ; MASK: Vcc below SMP trip level
 0008           VLT_CMP_LVD:          equ 08h    ; MASK: Vcc below LVD trip level
 0008           VLT_CMP_PPOR:         equ 08h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               and   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0040           UART_1_TX_INT_MASK:                           equ 40h
 00E1           UART_1_TX_INT_REG:                            equ 0e1h  ;TX interrupt address
 0008           UART_1_RX_INT_MASK:                           equ 08h  ;mask value for global int reg bit for RX instance
 00E1           UART_1_RX_INT_REG:                            equ 0e1h  ;RX interrupt address
 0000           
 0000           UART_1_RXBUF_ENABLE:                        equ   0
 0000           
 0000           ; Interrupt control masks
 0001           UART_1_ENABLE_RX_INT:                          equ  0x01
 0000           UART_1_DISABLE_RX_INT:                         equ  0x00
 0002           UART_1_ENABLE_TX_INT:                          equ  0x02
 0000           UART_1_DISABLE_TX_INT:                         equ  0x00
 0000           
 0000           UART_1_INT_MODE_TX_REG_EMPTY:                equ 0x00
 0001           UART_1_INT_MODE_TX_COMPLETE:                 equ 0x01
 0000           
 FFFFFFFF           UART_1_RX_IGNORE_BELOW:                      equ  ffffffffh
 0010           UART_1_RX_BUFFER_SIZE:                       equ  10h
 FFFFFFFF           UART_1_CMD_TERM:                             equ  ffffffffh
 FFFFFFFF           UART_1_DELIMITER:                            equ  ffffffffh
 0000           
 0000           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000           ;       WARNING WARNING WARNING
 0000           ; The following equates are for backwards
 0000           ; compatibility only and should not be used
 0000           ; for new designs.
 0000           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000           
 0000           ;------------------------------------
 0000           ;  Parity masks
 0000           ;------------------------------------
 0000           UART_PARITY_NONE:       equ   00h
 0002           UART_PARITY_EVEN:       equ   02h
 0006           UART_PARITY_ODD:        equ   06h
 0000           
 0000           ;------------------------------------
 0000           ;  TX Status Register masks
 0000           ;------------------------------------
 0020           UART_TX_COMPLETE:       equ   20h
 0010           UART_TX_BUFFER_EMPTY:   equ   10h
 0000           
 0000           ;------------------------------------
 0000           ;  RX Status Register masks
 0000           ;------------------------------------
 0010           UART_RX_ACTIVE:         equ   10h
 0008           UART_RX_COMPLETE:       equ   08h
 0080           UART_RX_PARITY_ERROR:   equ   80h
 0040           UART_RX_OVERRUN_ERROR:  equ   40h
 0020           UART_RX_FRAMING_ERROR:  equ   20h
 00E0           UART_RX_NO_ERROR:       equ   E0h
 0000           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000           ;             END WARNING
 0000           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000           
 0000           
 0000           
 0000           ;------------------------------------
 0000           ;  Parity masks
 0000           ;------------------------------------
 0000           UART_1_PARITY_NONE:                     equ   00h
 0002           UART_1_PARITY_EVEN:                     equ   02h
 0006           UART_1_PARITY_ODD:                      equ   06h
 0000           
 0000           ;------------------------------------
 0000           ;  TX Status Register masks
 0000           ;------------------------------------
 0020           UART_1_TX_COMPLETE:                     equ   20h
 0010           UART_1_TX_BUFFER_EMPTY:                 equ   10h
 0000           
 0000           ;------------------------------------
 0000           ;  RX Status Register masks
 0000           ;------------------------------------
 0010           UART_1_RX_ACTIVE:                       equ   10h
 0008           UART_1_RX_COMPLETE:                     equ   08h
 0008           UART_1_RX_REG_FULL:                     equ   08h
 0080           UART_1_RX_PARITY_ERROR:                 equ   80h
 0040           UART_1_RX_OVERRUN_ERROR:                equ   40h
 0020           UART_1_RX_FRAMING_ERROR:                equ   20h
 00E0           UART_1_RX_ERROR:                        equ   E0h
 0001           UART_1_RX_ENABLE:                       equ   01h
 0000           
 00F0           UART_1_RX_BUF_ERROR:                    equ   F0h  ; Mask for any Rx that may occur.
 0010           UART_1_RX_BUF_OVERRUN:                  equ   10h  ; This indicates the software buffer has
 0000                                                                   ; been over run.
 0001           UART_1_RX_BUF_CMDTERM:                  equ   01h  ; Command terminator has been received.
 0000           
 0001           UART_1_RX_NO_DATA:                      equ   01h
 00E0           UART_1_RX_NO_ERROR:                     equ   E0h
 0000           
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers Address Constants for UART_1
 0000           ;--------------------------------------------------
 0000           ;---------------------------------
 0000           ;  Registers used by TX
 0000           ;---------------------------------
 003B           UART_1_TX_CONTROL_REG:  equ 3bh            ; Control register
 0038           UART_1_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
 0039           UART_1_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
 0038           UART_1_TX_FUNC_REG: equ 38h             ; Function register
 0039           UART_1_TX_INPUT_REG:    equ 39h            ; Input register
 003A           UART_1_TX_OUTPUT_REG:   equ 3ah           ; Output register
 0000           
 0000           ;---------------------------------
 0000           ;  Registers used by RX
 0000           ;---------------------------------
 002F           UART_1_RX_CONTROL_REG:  equ 2fh            ; Control register
 002C           UART_1_RX_SHIFT_REG:    equ 2ch               ; RX Shift Register register
 002E           UART_1_RX_BUFFER_REG:   equ 2eh               ; RX Buffer Register
 002C           UART_1_RX_FUNC_REG: equ 2ch             ; Function register
 002D           UART_1_RX_INPUT_REG:    equ 2dh            ; Input register
 002E           UART_1_RX_OUTPUT_REG:   equ 2eh           ; Output register
 0000           
 0000           ; end of file UART_1.inc
 0000           
                area text (ROM, REL)
                
                ;-----------------------------------------------
                ;  Global Symbols
                ;-----------------------------------------------
                ;-------------------------------------------------------------------
                ;  Declare the functions global for both assembler and C compiler.
                ;
                ;  Note that there are two names for each API. First name is
                ;  assembler reference. Name with underscore is name refence for
                ;  C compiler.  Calling function in C source code does not require
                ;  the underscore.
                ;-------------------------------------------------------------------
                export  UART_1_IntCntl
                export _UART_1_IntCntl
                
                export  UART_1_TxIntMode
                export _UART_1_TxIntMode
                
                export  UART_1_PutSHexByte
                export _UART_1_PutSHexByte
                export  UART_1_PutSHexInt
                export _UART_1_PutSHexInt
                
                export  UART_1_CPutString
                export _UART_1_CPutString
                export  UART_1_PutString
                export _UART_1_PutString
                export  UART_1_PutChar
                export _UART_1_PutChar
                export  UART_1_Write
                export _UART_1_Write
                export  UART_1_CWrite
                export _UART_1_CWrite
                
                export  UART_1_cGetChar
                export _UART_1_cGetChar
                export  UART_1_cReadChar
                export _UART_1_cReadChar
                export  UART_1_iReadChar
                export _UART_1_iReadChar
                export  UART_1_PutCRLF
                export _UART_1_PutCRLF
                
                IF (UART_1_RXBUF_ENABLE)
                export  UART_1_CmdReset
                export _UART_1_CmdReset
                export  UART_1_bCmdCheck
                export _UART_1_bCmdCheck
                export  UART_1_bCmdLength
                export _UART_1_bCmdLength
                export  UART_1_bErrCheck
                export _UART_1_bErrCheck
                
                export  UART_1_szGetParam
                export _UART_1_szGetParam
                export  UART_1_szGetRestOfParams
                export _UART_1_szGetRestOfParams
                
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                area bss(RAM)
                 ptrParam:   BLK  1
                
                ENDIF
                
                area text (ROM,REL)
                
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
 0001           bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
 0000           
                AREA UserModules (ROM, REL)
                
                
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: UART_1_IntCntl
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;     This function is used to enable/disable the Rx and Tx interrupt.
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ;     A => Interrupt mask
 0000           ;
 0000           ;  RETURNS:
 0000           ;     none.
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0000           ;
 0000           ;  THEORY of OPERATION or PROCEDURE:
 0000           ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
 0000           ;     and RX block.
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000            UART_1_IntCntl:
 0000           _UART_1_IntCntl:
 0000           
 0000 08           push A
 0001 2101         and  A,UART_1_ENABLE_RX_INT
 0003 A006         jz   .DisRxInt
 0005                ; Enable Rx Interrupt
 0005 43E108        or    reg[UART_1_RX_INT_REG], UART_1_RX_INT_MASK               ; enable specified interrupt enable bit
 0008 8004         jmp  .CheckTxInt
 000A           .DisRxInt:
 000A                ; Disable Rx Interrupt
 000A 41E1F7        and   reg[UART_1_RX_INT_REG], ~UART_1_RX_INT_MASK              ; disable specified interrupt enable bit
 000D           
 000D           .CheckTxInt:
 000D 18           pop  A
 000E 2102         and  A,UART_1_ENABLE_TX_INT
 0010 A006         jz   .DisTxInt
 0012                ; Enable Tx Interrupt
 0012 43E140        or    reg[UART_1_TX_INT_REG], UART_1_TX_INT_MASK               ; enable specified interrupt enable bit
 0015 8004         jmp  .End_IntCntl
 0017           .DisTxInt:
 0017                ; Disable Tx Interrupt
 0017 41E1BF        and   reg[UART_1_TX_INT_REG], ~UART_1_TX_INT_MASK              ; disable specified interrupt enable bit
 001A           
 001A           .End_IntCntl:
 001A 7F           ret
 001B           .ENDSECTION
 001B           
 001B           .SECTION
 001B           ;-----------------------------------------------------------------------------
 001B           ;  FUNCTION NAME: UART_1_TxIntMode
 001B           ;
 001B           ;  DESCRIPTION:
 001B           ;     This function is used to change the TX Interrupt mode.
 001B           ;
 001B           ;  ARGUMENTS:
 001B           ;     A => Tx Interrupt mode
 001B           ;             0 => Interrupt on TX_Reg_Empty  (Default)
 001B           ;             1 => Interrupt on TX Complete
 001B           ;
 001B           ;  RETURNS:
 001B           ;     none.
 001B           ;
 001B           ;  SIDE EFFECTS:
 001B           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 001B           ;
 001B           ;  THEORY of OPERATION or PROCEDURE:
 001B           ;
 001B           ;
 001B           ;-----------------------------------------------------------------------------
 001B            UART_1_TxIntMode:
 001B           _UART_1_TxIntMode:
 001B           
 001B 2101         and  A,UART_1_INT_MODE_TX_COMPLETE
 001D 7110          or    F, FLAG_XIO_MASK
 001F 3901         cmp  A,UART_1_INT_MODE_TX_COMPLETE
 0021 A006         jz   .SetTxCmpMode
 0023           
 0023 4138EF       and  reg[UART_1_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
 0026 8004         jmp  .TxIntMode_End
 0028           
 0028           .SetTxCmpMode:                                   ; Set Interrupt on TX Complete
 0028 433810       or   reg[UART_1_TX_FUNC_REG],0x10
 002B           
 002B           .TxIntMode_End:
 002B 70EF          and   F, ~FLAG_XIO_MASK
 002D 7F           ret
 002E           .ENDSECTION
 002E           
 002E           ;-----------------------------------------------------------------------------
 002E           ;  FUNCTION NAME: UART_1_PutSHexByte
 002E           ;
 002E           ;  DESCRIPTION:
 002E           ;     Print a byte in Hex (two characters) to the UART Tx
 002E           ;
 002E           ;  ARGUMENTS:
 002E           ;     A  => (BYTE) Data/char to be printed
 002E           ;
 002E           ;  RETURNS:
 002E           ;     none.
 002E           ;
 002E           ;  SIDE EFFECTS:
 002E           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 002E           ;
 002E           ;-----------------------------------------------------------------------------
 002E           .LITERAL
 002E           UART_1_HEX_STR:
 002E 30313233343536373839414243444546      DS    "0123456789ABCDEF"
 003E           .ENDLITERAL
 003E           
 003E           .SECTION
 003E            UART_1_PutSHexByte:
 003E           _UART_1_PutSHexByte:
 003E           
 003E 08            push  A                            ; Save lower nibble
 003F 67            asr   A                            ; Shift high nibble to right
 0040 67            asr   A
 0041 67            asr   A
 0042 67            asr   A
 0043 210F          and   A,0Fh                        ; Mask off nibble
 0045 FFE7          index UART_1_HEX_STR               ; Get Hex value
 0047 900F          call  UART_1_PutChar               ; Write data to screen
 0049 18            pop   A                            ; Restore value
 004A 210F          and   A,0Fh                        ; Mask off lower nibble
 004C FFE0          index UART_1_HEX_STR               ; Get Hex value
 004E 9008          call  UART_1_PutChar               ; Write data to screen
 0050 7F            ret
 0051           .ENDSECTION
 0051           
 0051           .SECTION
 0051           ;-----------------------------------------------------------------------------
 0051           ;  FUNCTION NAME: UART_1_PutSHexInt
 0051           ;
 0051           ;  DESCRIPTION:
 0051           ;     Print an Int in Hex (four characters) to UART Tx
 0051           ;
 0051           ;  ARGUMENTS:
 0051           ;     Pointer to string
 0051           ;     A  => ASB of Int
 0051           ;     X  => MSB of Int
 0051           ;
 0051           ;  RETURNS:
 0051           ;     none.
 0051           ;
 0051           ;  SIDE EFFECTS:
 0051           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0051           ;
 0051           ;
 0051           ;-----------------------------------------------------------------------------
 0051           
 0051            UART_1_PutSHexInt:
 0051           _UART_1_PutSHexInt:
 0051 4B            swap  A,X
 0052 9FEA          call  UART_1_PutSHexByte           ; Print MSB
 0054 5B            mov   A,X                          ; Move LSB into position
 0055 9FE7          call  UART_1_PutSHexByte           ; Print LSB
 0057 7F            ret
 0058           .ENDSECTION
 0058           
 0058           .SECTION
 0058           ;-----------------------------------------------------------------------------
 0058           ;  FUNCTION NAME: UART_1_PutChar
 0058           ;
 0058           ;  DESCRIPTION:
 0058           ;     Send character out through UART TX port.
 0058           ;
 0058           ;
 0058           ;  ARGUMENTS:
 0058           ;     A has Character to send to UART Tx Port
 0058           ;
 0058           ;  RETURNS:
 0058           ;     none
 0058           ;
 0058           ;  SIDE EFFECTS:
 0058           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0058           ;
 0058           ;  THEORY of OPERATION or PROCEDURE:
 0058           ;     none.
 0058           ;
 0058           ;-----------------------------------------------------------------------------
 0058            UART_1_PutChar:
 0058           _UART_1_PutChar:
 0058           
 0058 493B10       tst REG[UART_1_TX_CONTROL_REG], UART_1_TX_BUFFER_EMPTY    ; Check Tx Status
 005B AFFC         jz  UART_1_PutChar
 005D 6039         mov REG[UART_1_TX_BUFFER_REG], A                      ; Write data to Tx Port
 005F 7F           ret
 0060           
 0060           .ENDSECTION
 0060           
 0060           .SECTION
 0060           ;-----------------------------------------------------------------------------
 0060           ;  FUNCTION NAME: UART_1_cGetChar
 0060           ;
 0060           ;  DESCRIPTION:
 0060           ;     Read character from UART RX port.
 0060           ;
 0060           ;
 0060           ;  ARGUMENTS:
 0060           ;      none
 0060           ;
 0060           ;  RETURNS:
 0060           ;     char that is returned from UART
 0060           ;
 0060           ;  SIDE EFFECTS:
 0060           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0060           ;     Program flow will stay in this function until a character is received.
 0060           ;     If the watchdog timer is used, care must be taken to make sure that
 0060           ;     the delay between characters is less than the watchdog timeout.
 0060           ;
 0060           ;  THEORY of OPERATION or PROCEDURE:
 0060           ;     none.
 0060           ;
 0060           ;-----------------------------------------------------------------------------
 0060            UART_1_cGetChar:
 0060           _UART_1_cGetChar:
 0060           
 0060 492F08       tst REG[UART_1_RX_CONTROL_REG],UART_1_RX_REG_FULL   ; Check if a character is ready
 0063 AFFC         jz  UART_1_cGetChar                           ; If not loop
 0065           
 0065 5D2E         mov A, REG[UART_1_RX_BUFFER_REG]              ; Get character
 0067 7F           ret
 0068           .ENDSECTION
 0068           
 0068           .SECTION
 0068           ;-----------------------------------------------------------------------------
 0068           ;  FUNCTION NAME: UART_1_cReadChar
 0068           ;
 0068           ;  DESCRIPTION:
 0068           ;     Read character from UART RX port.
 0068           ;
 0068           ;  ARGUMENTS:
 0068           ;      none
 0068           ;
 0068           ;  RETURNS:
 0068           ;     char that is returned from UART
 0068           ;
 0068           ;  SIDE EFFECTS:
 0068           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0068           ;     A valid 0x00 character will be ignored, since a 0x00 return value
 0068           ;     implies a valid character or an error condition occured.
 0068           ;
 0068           ;  THEORY of OPERATION or PROCEDURE:
 0068           ;     none.
 0068           ;
 0068           ;-----------------------------------------------------------------------------
 0068            UART_1_cReadChar:
 0068           _UART_1_cReadChar:
 0068           
 0068           
 0068 5D2F         mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
 006A 08           push A
 006B 2108         and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
 006D B004         jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
 006F 18           pop  A
 0070 800B         jmp  .RX_NO_VALID_CHAR
 0072           
 0072           .RX_DATA_RDY:
 0072 5D2E         mov  A,REG[UART_1_RX_BUFFER_REG ]          
 0074 4B           swap A,X                                                ; determine if data is valid
 0075           
 0075 18           pop  A                                                  ; Check for errors
 0076 21A0         and  A,(UART_1_RX_PARITY_ERROR | UART_1_RX_FRAMING_ERROR)
 0078 B003         jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
 007A 4B           swap A,X                                                ; Put data in A and exit
 007B 7F           ret
 007C           
 007C           .RX_NO_VALID_CHAR:
 007C 5000         mov A,0x00                                              ; Zero out character
 007E           
 007E            End_UART_1_cReadChar:
 007E 7F           ret
 007F           .ENDSECTION
 007F           
 007F           .SECTION
 007F           ;-----------------------------------------------------------------------------
 007F           ;  FUNCTION NAME: UART_1_iReadChar
 007F           ;
 007F           ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
 007F           ; to just set a value in the upper byte if error conditions exists.
 007F           ;
 007F           ;  DESCRIPTION:
 007F           ;     Read character from UART RX port.
 007F           ;
 007F           ;  ARGUMENTS:
 007F           ;      none
 007F           ;
 007F           ;  RETURNS:
 007F           ;     An integer value is returned.  A negative value inplies and error
 007F           ;     condition, a positive value between 0 and 255 is the return character.
 007F           ;
 007F           ;     Error Codes:
 007F           ;        0x80CC    Parity Error
 007F           ;        0x40CC    Overrun Error
 007F           ;        0x20CC    Framing Error
 007F           ;        0x01CC    No Data available
 007F           ;
 007F           ;  SIDE EFFECTS:
 007F           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 007F           ;
 007F           ;  THEORY of OPERATION or PROCEDURE:
 007F           ;     none.
 007F           ;
 007F           ;-----------------------------------------------------------------------------
 007F            UART_1_iReadChar:
 007F           _UART_1_iReadChar:
 007F           
 007F           
 007F 5D2F         mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
 0081                                                                      ; Mask only errors and data ready
 0081 21E8         and  A,(UART_1_RX_ERROR|UART_1_RX_REG_FULL)
 0083 08           push A
 0084 2108         and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
 0086 B007         jnz  .RX_GET_DATA                                       ; Data Ready go read it.
 0088 18           pop  A
 0089 2901         or   A,UART_1_RX_NO_DATA                                ; Add no data flag
 008B 4B           swap A,X
 008C 8007         jmp  End_UART_1_iReadChar
 008E           
 008E           .RX_GET_DATA:
 008E 18           pop  A
 008F 21E0         and  A,UART_1_RX_ERROR
 0091 4B           swap A,X
 0092 5D2E         mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read data first, then
 0094                                                                      ; determine if data is valid
 0094           
 0094            End_UART_1_iReadChar:
 0094 7F           ret
 0095           .ENDSECTION
 0095           
 0095           .SECTION
 0095           ;-----------------------------------------------------------------------------
 0095           ;  FUNCTION NAME: UART_1_PutString
 0095           ;
 0095           ;  DESCRIPTION:
 0095           ;     Send String out through UART TX port.
 0095           ;
 0095           ;
 0095           ;  ARGUMENTS:
 0095           ;     Pointer to String
 0095           ;     A has MSB of string address
 0095           ;     X has LSB of string address
 0095           ;
 0095           ;  RETURNS:
 0095           ;     none
 0095           ;
 0095           ;  SIDE EFFECTS:
 0095           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0095           ;
 0095           ;  THEORY of OPERATION or PROCEDURE:
 0095           ;     none.
 0095           ;
 0095           ;-----------------------------------------------------------------------------
 0095            UART_1_PutString:
 0095           _UART_1_PutString:
 0095           
 0095 5200         mov   A,[X]                             ; Get value pointed to by X
 0097 A006         jz    End_PutString                     ; Check for end of string
 0099 9FBD         call  UART_1_PutChar                     ; Send character to Tx port
 009B 75           inc   X                                 ; Advance pointer to next character
 009C 8FF8         jmp   UART_1_PutString                   ; Get next character
 009E           
 009E           End_PutString:
 009E 7F           ret
 009F           .ENDSECTION
 009F           
 009F           .SECTION
 009F           ;-----------------------------------------------------------------------------
 009F           ;  FUNCTION NAME: UART_1_Write
 009F           ;
 009F           ;  DESCRIPTION:
 009F           ;     Send String of length X to serial port
 009F           ;
 009F           ;
 009F           ;  ARGUMENTS:
 009F           ;     Pointer to String
 009F           ;     [X]   has MSB of string address
 009F           ;     [X-1] has LSB of string address
 009F           ;     [X-2] Count of characters to send
 009F           ;
 009F           ;  RETURNS:
 009F           ;     none
 009F           ;
 009F           ;  SIDE EFFECTS:
 009F           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 009F           ;
 009F           ;  THEORY of OPERATION or PROCEDURE:
 009F           ;     none.
 009F           ;
 009F           ;-----------------------------------------------------------------------------
 0000           STR_LSB:    equ  0           ; LSB pointer of string
 FFFFFFFF           STR_MSB:    equ -1           ; MSB pointer of string
 FFFFFFFE           CNT_LEN:    equ -2           ; Length of data to send
 009F           
 009F            UART_1_Write:
 009F           _UART_1_Write:
 009F           
 009F 52FE         mov   A,[X+CNT_LEN]                     ; Get length of string to send
 00A1 A00F         jz    End_Write
 00A3 7BFE         dec   [X+CNT_LEN]                       ; Decrement counter
 00A5 10           push  X
 00A6 5900         mov   X,[X+STR_LSB]                     ; Get character to send
 00A8 5200         mov   A,[X]
 00AA 9FAC         call  UART_1_PutChar                     ; Send character to UART
 00AC 20           pop   X
 00AD 7700         inc   [X+STR_LSB]
 00AF 8FEF         jmp   UART_1_Write
 00B1           
 00B1           End_Write:
 00B1 7F           ret
 00B2           .ENDSECTION
 00B2           
 00B2           .SECTION
 00B2           ;-----------------------------------------------------------------------------
 00B2           ;  FUNCTION NAME: UART_1_CWrite
 00B2           ;
 00B2           ;             WARNING WARNING NOT COMPLETE
 00B2           ;
 00B2           ;  DESCRIPTION:
 00B2           ;     Send String of length X to serial port
 00B2           ;
 00B2           ;  ARGUMENTS:
 00B2           ;     Pointer to String
 00B2           ;     [X]   has LSB of string address
 00B2           ;     [X-1] has MSB of string address
 00B2           ;     [X-2] LSB of Count of character to send
 00B2           ;     [X-3] MSB of Count of character to send
 00B2           ;
 00B2           ;  RETURNS:
 00B2           ;     none
 00B2           ;
 00B2           ;  SIDE EFFECTS:
 00B2           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 00B2           ;
 00B2           ;  THEORY of OPERATION or PROCEDURE:
 00B2           ;     none.
 00B2           ;
 00B2           ;-----------------------------------------------------------------------------
 0000           CSTR_LSB:   equ  0           ; LSB pointer of string
 FFFFFFFF           CSTR_MSB:   equ -1           ; MSB pointer of string
 FFFFFFFE           CLEN_LSB:   equ -2           ; LSB Length of data to send
 FFFFFFFD           CLEN_MSB:   equ -3           ; MSB Length of data to send
 00B2           
 00B2            UART_1_CWrite:
 00B2           _UART_1_CWrite:
 00B2                                                       ; Check for zero counter
 00B2 3DFD00       cmp   [X+CLEN_MSB],0x00
 00B5 B006         jnz   .CW_WRITEIT
 00B7 3DFE00       cmp   [X+CLEN_LSB],0x00
 00BA A018         jz    .End_CWrite                         ; Leave if done
 00BC           
 00BC           .CW_WRITEIT:                                 ; Save pointers
 00BC 10           push  X
 00BD 52FF         mov   A,[X+CSTR_MSB]
 00BF 5900         mov   X,[X+CSTR_LSB]
 00C1 28           romx                                     ; Get character from ROM
 00C2 9F94         call  UART_1_PutChar                      ; Send Char
 00C4 20           pop   X
 00C5           
 00C5 070001       add   [X+CSTR_LSB],1                     ; Increment the string pointer
 00C8 07FF00       add   [X+CSTR_MSB],0
 00CB           
 00CB                                                       ; Dec the counter
 00CB 17FE01       sub   [X+CLEN_LSB],0x01
 00CE 1FFD00       sbb   [X+CLEN_MSB],0x00
 00D1           
 00D1 8FE0         jmp   UART_1_CWrite
 00D3           
 00D3           .End_CWrite:
 00D3 7F           ret
 00D4           .ENDSECTION
 00D4           
 00D4           .SECTION
 00D4           ;-----------------------------------------------------------------------------
 00D4           ;  FUNCTION NAME: UART_1_CPutString
 00D4           ;
 00D4           ;  DESCRIPTION:
 00D4           ;     Send String out through UART TX port.
 00D4           ;
 00D4           ;
 00D4           ;  ARGUMENTS:
 00D4           ;     Pointer to String
 00D4           ;     A has MSB of string address
 00D4           ;     X has LSB of string address
 00D4           ;
 00D4           ;  RETURNS:
 00D4           ;     none
 00D4           ;
 00D4           ;  SIDE EFFECTS:
 00D4           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 00D4           ;
 00D4           ;  THEORY of OPERATION or PROCEDURE:
 00D4           ;     none.
 00D4           ;
 00D4           ;-----------------------------------------------------------------------------
 00D4            UART_1_CPutString:
 00D4           _UART_1_CPutString:
 00D4           
 00D4 08           push  A                                       ; Store ROM pointer
 00D5 10           push  X
 00D6 28           romx                                          ; Get character from ROM
 00D7 A00B         jz    .End_CPutString
 00D9 9F7D         call  UART_1_PutChar                     ; Print character
 00DB 20           pop   X
 00DC 18           pop   A
 00DD 75           inc   X                                       ; Inc LSB of pointer
 00DE DFF5         jnc   UART_1_CPutString                       ; Check for carry
 00E0 74           inc   A                                       ; Inc MSB of pointer
 00E1 8FF2         jmp   UART_1_CPutString
 00E3           
 00E3           
 00E3           .End_CPutString:
 00E3 20           pop   X                                       ; Don't really have to restore A and X
 00E4 20           pop   X                                       ; but need to correct the stack.
 00E5 7F           ret
 00E6           .ENDSECTION
 00E6           
 00E6           .SECTION
 00E6           ;-----------------------------------------------------------------------------
 00E6           ;  FUNCTION NAME: UART_1_PutCRLF
 00E6           ;
 00E6           ;  DESCRIPTION:
 00E6           ;     Send a CR and LF
 00E6           ;
 00E6           ;  ARGUMENTS:
 00E6           ;     none.
 00E6           ;
 00E6           ;  RETURNS:
 00E6           ;     none.
 00E6           ;
 00E6           ;  SIDE EFFECTS:
 00E6           ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 00E6           ;
 00E6           ;  THEORY of OPERATION or PROCEDURE:
 00E6           ;
 00E6           ;-----------------------------------------------------------------------------
 00E6            UART_1_PutCRLF:
 00E6           _UART_1_PutCRLF:
 00E6           
 00E6 500D         mov  A,0x0D                        ; Send CR
 00E8 9F6E         call UART_1_PutChar
 00EA 500A         mov  A,0x0A                        ; Send LF
 00EC 9F6A         call UART_1_PutChar
 00EE 7F           ret
 00EF           .ENDSECTION
 00EF           
 00EF           
                IF (UART_1_RXBUF_ENABLE)
                .SECTION
                ;-----------------------------------------------------------------------------
                ;-----------------------------------------------------------------------------
                ;
                ;     Command Buffer commands
                ;
                ;-----------------------------------------------------------------------------
                ;-----------------------------------------------------------------------------
                
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: UART_1_CmdReset
                ;
                ;  DESCRIPTION:
                ;     Reset command string and status flags
                ;
                ;  ARGUMENTS:
                ;     none.
                ;
                ;  RETURNS:
                ;     none.
                ;
                ;  SIDE EFFECTS:
                ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;     Clear the command buffer, command counter, and flag.
                ;
                ;-----------------------------------------------------------------------------
                 UART_1_CmdReset:
                _UART_1_CmdReset:
                
                   mov [UART_1_aRxBuffer], 0x00
                   mov [UART_1_bRxCnt], 0x00
                   and [UART_1_fStatus], 0x00
                   mov [ptrParam],0x00
                   ret
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: UART_1_bCmdCheck
                ;
                ;  DESCRIPTION:
                ;     Check to see if valid command in buffer.
                ;
                ;  ARGUMENTS:
                ;     none.
                ;
                ;  RETURNS:
                ;     BYTE  fStatus - Status of command receive buffer.
                ;                     Returns non-zero value in A if command is valid.
                ;
                ;  SIDE EFFECTS:
                ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;     Read the status and control register.
                ;
                ;-----------------------------------------------------------------------------
                 UART_1_bCmdCheck:
                _UART_1_bCmdCheck:
                   mov A,  [UART_1_fStatus]
                   and A, UART_1_RX_BUF_CMDTERM                  ; Mask off Command status
                   ret
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: UART_1_bErrCheck
                ;
                ;  DESCRIPTION:
                ;     Check to see if an error has occured since last CmdReset
                ;
                ;  ARGUMENTS:
                ;     none.
                ;
                ;  RETURNS:
                ;     BYTE  fStatus - Status of command receive buffer.
                ;                     Returns non-zero value in A if command is valid.
                ;           0x80 => Parity Error
                ;           0x40 => OverRun Error
                ;           0x20 => Framing Error
                ;           0x10 => Software Buffer OverRun
                ;
                ;  SIDE EFFECTS:
                ;     Error Status is clear when read.
                ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;     Read RX buffer error status and clear status
                ;
                ;-----------------------------------------------------------------------------
                 UART_1_bErrCheck:
                _UART_1_bErrCheck:
                   mov A,  [UART_1_fStatus]
                   and A, UART_1_RX_BUF_ERROR                    ; Mask off Error status
                   and [UART_1_fStatus], ~UART_1_RX_BUF_ERROR
                   ret
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: UART_1_bCmdLength
                ;
                ;  DESCRIPTION:
                ;     Get length of command string
                ;
                ;  ARGUMENTS:
                ;     none.
                ;
                ;  RETURNS:
                ;     BYTE  bRxCnt    Returns the command length in A.
                ;
                ;  SIDE EFFECTS:
                ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                 UART_1_bCmdLength:
                _UART_1_bCmdLength:
                   mov A,  [UART_1_bRxCnt]
                   ret
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: UART_1_szGetParam
                ;
                ;  DESCRIPTION:
                ;      Return next parameter from UART Rx buffer
                ;
                ;
                ;  ARGUMENTS:  none
                ;
                ;     A   Parameter delimiter
                ;    [X]   LSB of buffer pointer
                ;
                ;  RETURNS:
                ;     A => MSB of parameter
                ;     X => LSB of parameter
                ;
                ;  SIDE EFFECTS:
                ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;     The receive string is modified by placing Null characters at the end
                ;     of each parameter as they are recovered.
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;     none.
                ;
                ;-----------------------------------------------------------------------------
                 UART_1_szGetParam:
                _UART_1_szGetParam:
                
                    mov  A, <UART_1_aRxBuffer               ; Get address to receive buffer
                    add  A, [ptrParam]                      ; Add string offset
                    mov  X,A
                
                    mov  A,[X]                              ; Get character pointed by X
                    jnz  .CheckForDelim                     ; Check for Null character
                    push X                                  ; Save LSB of current pointer
                    jmp  .End_GetNextParam
                
                                                            ; Check for delimiter and keep looping until
                                                            ; all leading delimiters have been found.
                .CheckForDelim:
                    cmp  A,UART_1_DELIMITER                 ; Check if we have a delimiter
                    jnz  .ParamStartFound
                    inc  X                                  ; Increment both current pointer and
                    inc  [ptrParam]                         ; stored pointer.
                    mov  A,[X]                              ; Get character pointed by X
                    cmp  [ptrParam],(UART_1_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
                    jnz  .CheckForDelim
                                                            ; End of string found
                .EndOfString:
                    push X                                  ; Save ptr
                .TerminateString:
                    mov  [X],0x00                           ; Make sure string is zero
                    jmp  .End_GetNextParam
                
                .ParamStartFound:
                    push X                                  ; Beginning of parameter found, save pointer
                
                .ParamLoop:
                                                            ; Now loop until end of parameter found.
                    inc  X                                  ; Advance pointers.
                    inc  [ptrParam]
                    cmp  [ptrParam],(UART_1_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
                    jz   .TerminateString
                    mov  A,[X]                              ; Get next character
                    jz   .End_GetNextParam
                    cmp  A,UART_1_DELIMITER                 ; Check if we have a delimiter
                    jnz  .ParamLoop                         ; Still no delimiter, loop again
                
                    mov  [X],0x00                           ; Replace delimiter with null for end of substring
                    inc  [ptrParam]
                    cmp  [ptrParam],(UART_1_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
                    jnz  .End_GetNextParam                  ; If not end of string leave
                    mov  [ptrParam],(UART_1_RX_BUFFER_SIZE -1)  ; Reset pointer to end of string.
                
                
                .End_GetNextParam:
                   pop  X
                   push X
                   cmp  [X],0x00
                   jnz  .NotNullString
                   pop  X
                   mov  X,0x00
                   mov  A,X
                   ret
                
                .NotNullString:
                   pop  X
                   mov  A,0x00                            ; Return pointer
                   ret
                .ENDSECTION
                
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: UART_1_szGetRestOfParams
                ;
                ;  DESCRIPTION:
                ;      Return the rest of the UART RX buffer
                ;
                ;
                ;  ARGUMENTS:  none
                ;
                ;  RETURNS:
                ;     A => MSB of parameter
                ;     X => LSB of parameter
                ;
                ;  SIDE EFFECTS:
                ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;     none.
                ;
                ;-----------------------------------------------------------------------------
                 UART_1_szGetRestOfParams:
                _UART_1_szGetRestOfParams:
                
                    mov  A, <UART_1_aRxBuffer               ; Get address to receive buffer
                    add  A, [ptrParam]                      ; Add string offset
                    mov  X,A
                    mov  A,0x00                             ; Return pointer
                    ret
                .ENDSECTION
                
                ENDIF
                
                
                ; End of File UART_1Plus.asm
