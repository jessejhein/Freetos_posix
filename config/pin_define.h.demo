/**
 * demo pin_define.h
 */

#ifndef PIN_DEFINE_H_
#define PIN_DEFINE_H_

#include <asm/types.h>




//  ==============================UART=====================================
#ifdef UART_MOD
/**
 * \brief set the RS485 digital control pin as output
 */
#define UART_A_RS485_CTL_EN()


/**
 * \brief set the RS485 digital control pin to TX state
 */
#define UART_A_RS485_TX_ON()


/**
 * \brief set the RS485 digital control pin to RX state
 */
#define UART_A_RS485_TX_OFF()


/**
 * \brief set the RS485 digital control pin as output
 */
#define UART_B_RS485_CTL_EN()


/**
 * \brief set the RS485 digital control pin to TX state
 */
#define UART_B_RS485_TX_ON()


/**
 * \brief set the RS485 digital control pin to RX state
 */
#define UART_B_RS485_TX_OFF()
#endif /* UART_MOD */



//  ==============================KB======================================
#ifdef KB_MOD
#ifdef KB_PUSH_KEY
#if (TOTAL_PUSH_KEY == 1)
/**
 * \brief Initialise Enter Key
 * \remarks ENTER_KEY (RG1), input
 */
#define EN_PKEY0()                      TRISG |= 0x0002


/**
 * \brief Read Enter Key Status
 * \retval 0 key is up
 * \retval 1 key is down
 */
#define IO_PKEY0()                      PORTG & 0x0002
#endif /* TOTAL_PUSH_KEY == 1 */
#endif /* KB_PUSH_KEY */


//  -------------------------------------------------------------------------------
#ifdef KB_ROTATE_KEY
/**
 * \brief Initialise Rotary Up Key
 * \remarks UP_KEY (RG13), input, change notification
 */
#define EN_RKEY0_UP() \
{ \
  TRISC |= 0x2000; \
  _CN1IE = 1; /* change input register, interrupt setting */ \
}


/**
 * \brief Read Rotary Up Key Status
 * \retval 0 key is low state
 * \retval 1 key is high state
 */
#define IO_RKEY0_UP()                   PORTC & 0x2000


/**
 * \brief Initialise Rotary Down Key
 * \remarks DOWN_KEY (RG14), input, change notification
 */
#define EN_RKEY0_DN() \
{ \
  TRISC |= 0x4000; \
  _CN0IE = 1; /* change input register, interrupt setting */ \
}


/**
 * \brief Read Rotary Down Key Status
 * \retval 0 key is low state
 * \retval 1 key is high state
 */
#define IO_RKEY0_DN()                   PORTC & 0x4000
#endif /* KB_ROTATE_KEY */
#endif /* KB_MOD */



//  ==============================LED=====================================
#ifdef LED_MOD
/** handler for LED module */
extern int fd_led;
#endif /* LED_MOD */


#ifdef I2C_LED_DRIVER_MOD
/** handler for I2C LED module */
extern int fd_i2c_led;

#define LED_CHANNEL0                    0
#define LED_CHANNEL1                    1
#define LED_CHANNEL2                    2
#define MASTER_LED_CHANNEL              3
#define BUZZER_VOLUME_CHANNEL           4


/**
 * \brief Control on off of buzzer
 * \param status 0 = off, 1 = on
 * \remarks volume depends on UI setting
 */
extern void ui_buzzer_ctrl (char status);
#endif /* I2C_LED_DRIVER_MOD */



//  ===========================GPIO========================================
#ifdef I2C_GPIO_MOD
/** handler for I2C GPIO module */
extern int fd_i2c_gpio;
#endif /* I2C_GPIO_MOD */



//  ===========================ETHERNET PORT===============================
#ifdef ETHERNET_MOD
/*
 * \brief KEY MAPS
 * \remarks Interrupt Key Map
 */ 
#define ETH_ISR_EP                      _INT0EP
#define ETH_ISR_IF                      _INT0IF
#define ETH_ISR_IP                      _INT0IP
#define ETH_ISR_IE                      _INT0IE
#define dmfe_interrupt                  _IRQ _INT0Interrupt

/**
 * \brief initialise chip select for Ethernet port
 * \remarks ETH_CS# (RG14): output, [do not select chip]
 */
#define ETH_CS_CONFIG() \
{ \
  TRISG &= 0xBFFF; \
  LATG |= 0x4000; \
}

/**
 * \brief set the chip select pin
 * \param x logic to set
 */
#define ETH_CS(x) \
{ \
  LATG = ( (PORTG & 0xBFFF) | ((((__u16)x) << 14) & 0x4000) /* CS# */ ); \
}
#endif /* ETHERNET_MOD */



#endif /* PIN_DEFINE_H_ */
