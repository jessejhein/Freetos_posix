/**
 * demo pin_define.h
 */

#ifndef PIN_DEFINE_H_
#define PIN_DEFINE_H_

//  ===========================DATA BUS===================================
/**
 * \brief config data port pins to output or input
 * \param x 0: output\n
 *          1: input
 * \remarks DATA7   =>  _RG15
 * \remarks DATA6   =>  _RG14
 * \remarks DATA5   =>  _RG13
 * \remarks DATA4   =>  _RG12
 * \remarks DATA3   =>  _RG9
 * \remarks DATA2   =>  _RG8
 * \remarks DATA1   =>  _RG7
 * \remarks DATA0   =>  _RG6
 * \remarks Config output    =>  0000 1100 0011 1111 => 0x0C3F
 * \remarks Config input     =>  1111 0011 1100 0000 => 0xF3C0
 */
#define PCONFIG(x)                  do { \
                                      if((x)==0) TRISG &= 0x0C3F; \
                                      else TRISG |= 0xF3C0; \
                                    } while(0)

/**
 * \brief write a byte to data port
 * \param x 8-bit data
 * \remarks
 * \li ---- GG-- --GG GGGG & 0000 1100 0011 1111          => 0000 GG00 00GG GGGG
 * \li (0000 0000 XXXX XXXX << 8) & 1111 0000 0000 0000   => XXXX 0000 0000 0000
 * \li (0000 0000 XXXX XXXX << 6) & 0000 0011 1100 0000   => 0000 00XX XX00 0000
 * \li                        ORing                       => XXXX GGXX XXGG GGGG
 */
#define PWRITE(x)                   do { \
                                      LATG = ( (PORTG & 0x0C3F) | ((((int)x) << 8) & 0xF000) | ((((int)x) << 6) & 0x03C0) ); \
                                    } while(0)

/**
 * \brief read a byte from data port
 * \return 8-bit data
 */
#define PREAD()                     ( (unsigned char)( ((PORTG & 0xF000) >> 8) + ((PORTG & 0x03C0) >> 6) ) )       



//  ===========================ERROR PIN===================================
/*
 * \brief ERROR PIN
 * \remarks Flashing LED0:          Address Error
 * \remarks Flashing LED1:          Maths Error
 * \remarks LED0 On:                Stack Error
 * \remarks LED1 On:                DMA Error (dspic33 only)
 * \remarks Flashing LED0 & LED1:   Not enough memory to start FreeRTOS scheduler
 */
#define ERR_LED_CONFIG()            do { \
                                      TRISC &= 0x7FFF; \
                                      TRISD &= 0xFCFF; \
                                      LATD &= 0xFCFF; \
                                      PCONFIG(0); \
                                    } while(0)
#define ERR_LED0(x)                 do { \
                                      LATD = ((x)==1)? (LATD | 0x0200) : (LATD & 0xFDFF); \
                                    } while(0)
#define ERR_LED1(x)                 do { \
                                      LATC &= 0x7FFF; /* CLK to LOW */ \
                                      unsigned char state = PREAD(); \
                                      if(x) state |= 0x40; \
                                      else state &= 0xBF; \
                                      PWRITE(state); \
                                      udelay(1); /* DATA HOLD TIME */ \
                                      LATC |= 0x1000; /* CLK to HIGH */ \
                                    } while(0)



//  ==============================UART=====================================
#ifdef UART_MOD
/**
 * \brief set the RS485 digital control pin as output
 */
#define RS485_CTL_EN()              TRISC &= 0xFFFD

/**
 * \brief set the RS485 digital control pin to tx state
 */
#define RS485_TX_ON()               LATC |= 0x0002

/**
 * \brief set the RS485 digital control pin to rx state
 */
#define RS485_TX_OFF()              LATC &= 0xFFFD
#endif /* UART_MOD */



//  ==============================KB======================================
#ifdef KB_MOD
/**
 * \brief configure pin for all keys
 */
extern void key_config(void);

/**
 * \brief determine if a key has been pressed (push key)
 * \param id key id
 * \retval 1 key is being pressed
 * \retval 0 key is released
 */
extern int key_press(unsigned char id);

#ifdef KB_ROTATE_KEY
/**
 * \brief Check the state of rotary pin
 * \param id key id
 * \retval 1 key is at high state
 * \retval 0 key is at low state
 */
extern int rkey_state(unsigned char id);
#endif /* KB_ROTATE_KEY */

/**
 * \brief KEY MAPS
 * \remarks EN: input/output selection
 * \remarks IO: logic state of key
 * \remarks CN: change notification (interrupt enable pin to detect change of state)
 */
#ifdef KB_PUSH_KEY
#if (TOTAL_PUSH_KEY == 1)
//Enter key
#define EN_PKEY0()                  TRISD |= 0x0400
#define IO_PKEY0()                  PORTD & 0x0400
#elif (TOTAL_PUSH_KEY == 5)
//Enter key
#define EN_PKEY0()                  TRISD |= 0x0400
#define IO_PKEY0()                  PORTD & 0x0400
//Up key
#define EN_PKEY1()                  TRISC |= 0x4000
#define IO_PKEY1()                  PORTC & 0x4000
//Down key
#define EN_PKEY2()                  TRISC |= 0x2000
#define IO_PKEY2()                  PORTC & 0x2000
//Left key
#define EN_PKEY3()                  TRISB |= 0x0080
#define IO_PKEY3()                  PORTB & 0x0080
//Right key
#define EN_PKEY4()                  TRISB |= 0x0040
#define IO_PKEY4()                  PORT & 0x0040
#endif /* TOTAL_PUSH_KEY */
#endif /* KB_PUSH_KEY */
//  -------------------------------------------------------------------------------
#ifdef KB_FN_KEY
//Function key
#define EN_FN_KEY0()                TRISC |= 0x0004
#define IO_FN_KEY0()                PORTC & 0x0004
#define EN_FN_KEY1()                TRISB |= 0x0080
#define IO_FN_KEY1()                PORTB & 0x0080
#endif /* KB_FN_KEY */
//  -------------------------------------------------------------------------------
#ifdef KB_ROTATE_KEY
#if (TOTAL_ROTARY_KEY == 1)
//Up key
#define EN_RKEY0_UP()               do { \
                                      TRISC |= 0x4000; \
                                      _CN0IE = 1; /* change input register, interrupt setting */ \
                                    } while(0)
#define IO_RKEY0_UP()               PORTC & 0x4000
//Down Key
#define EN_RKEY0_DN()               do { \
                                      TRISC |= 0x2000; \
                                      _CN1IE = 1; /* change input register, interrupt setting */ \
                                    } while(0)
#define IO_RKEY0_DN()               PORTC & 0x2000
#endif /* TOTAL_ROTARY_KEY */
#endif /* KB_ROTATE_KEY */
#endif /* KB_MOD */



//  ==============================LED=====================================
#ifdef LED_MOD
/** handler for led module */
extern int fd_led;
/**
 * \brief initialize IOs for LED port
 * \remarks \li Set RC15 (DO CTRL) as output
 * \remarks \li Set RD8 (DO_EN#) as output
 * \remarks \li Set RD9 (BUZZER) as output
 */ 
#define LEDCONFIG()                 do { \
                                      TRISC &= 0x7FFF; \
                                      TRISD &= 0xFCFF; \
                                      LATD &= 0xFCFF; \
                                      cli(); \
                                      LED_CLK(0); \
                                      PCONFIG(0); \
                                      PWRITE(0x00); \
                                      udelay(1); \
                                      LED_CLK(1); \
                                      udelay(1); \
                                      sti(); \
                                    } while(0)
#define LED_CLK(x)                  LATC = ((x)==1)? (LATC | 0x8000) : (LATC & 0x7FFF) 
#define BUZZER_PIN(x)               LATD = ((x)==1)? (LATD | 0x0200) : (LATD & 0xFDFF) 

/**
 * \brief turn on led at hardware level
 * \param which which channel
 */
extern void io_on(int which);

/**
 * \brief turn off led at hardware level
 * \param which which channel
 */
extern void io_off(int which);

/**
 * \brief change the state of led at application level
 * \param channel which channel
 * \param state state to change to
 */
extern void led(unsigned char channel, unsigned char state);
#endif /* LED_MOD */



//  ===========================ETHERNET PORT===============================
#ifdef ETHERNET_MOD
/*
 * \brief KEY MAPS
 * \remarks Interrupt Key Map
 */ 
#define ETH_ISR_EP                  _INT0EP
#define ETH_ISR_IF                  _INT0IF
#define ETH_ISR_IP                  _INT0IP
#define ETH_ISR_IE                  _INT0IE
#define dmfe_interrupt              _IRQ _INT0Interrupt

/**
 * \brief initialize IOs for ethernet port
 * \remarks ETH_CS#: output, [do not select chip]
 * \remarks ADDR0: output, [addressing mode]
 * \remarks IOR#: output, [not read]
 * \remarks IOW#: output, [not write]
 */
#define ETH_IOCONFIG()              do { \
                                      TRISD &= 0xF7DF; \
                                      TRISF &= 0xFFFC; \
                                      LATD |= 0x0820; \
                                      LATF |= 0x0003; \
                                    } while(0)

/**
 * \brief set the io pins to read/write an address/data register
 * \param x command\n
 *          bit 0: read mode\n
 *          bit 1: write mode\n
 *          bit 2: address/data
 */
#define ETH_IOCMD(x)                do { \
                                      LATD = ( (PORTD & 0xF7DF) | ((((int)x) << 2) & 0x0020) | ((((int)x) << 9) & 0x0800) ); \
                                      LATF = ( (PORTF & 0xFFFC) | (((int)x) & 0x0003) ); \
                                    } while(0)
#endif /* ETHERNET_MOD */



//  ===============================LCD=====================================
#ifdef LCD_MOD
/** handler for lcd module */
extern int fd_lcd;
#endif /* LCD_MOD */
#ifdef LCD_TWLM6023
/**
 * \brief initialize IOs for lcd display
 * \remarks LCD_RES# (D7): output, [do not reset]
 * \remarks LCD_CS1# (D6): output, [do not select chip]
 * \remarks ADDR0 (D11): output, [addressing mode]
 * \remarks IOR/IOW# (F0): output, [read mode]
 * \remarks ENABLE CLK (F1): output, [disable clk]
 */
#define lcd_io_init()               do { \
                                      TRISD &= 0xF73F; \
                                      TRISF &= 0xFFFC; \
                                      LATF |= 0x0003; \
                                      LATD |= 0x00C0; \
                                      LATD &= 0xF7FF; \
                                    } while(0)
#define TW_LM6023_RS(x)             LATD = ((x)==1)? (LATD | 0x0800) : (LATD & 0xF7FF) 
#define TW_LM6023_WR(x)             LATF = ((x)==1)? (LATF | 0x0001) : (LATF & 0xFFFE)
#define TW_LM6023_EN(x)             LATF = ((x)==1)? (LATF | 0x0002) : (LATF & 0xFFFD)
#define TW_LM6023_CS(x)             LATD = ((x)==1)? (LATD | 0x0040) : (LATD & 0xFFBF) 
#define TW_LM6023_RES(x)            LATD = ((x)==1)? (LATD | 0x0080) : (LATD & 0xFF7F)

/** Constant for Amonics Logo */
extern const unsigned char logo[];

#ifdef PWM_MOD
/** handler for pwm module for backlight control */
extern int fd_pwm;

/** PWM channel id for lcd backlight */
#define PWM_BACKLIGHT_CH            3
#endif /* PWM_MOD */
#endif /* LCD_TWLM6023 */
//  ----------------------------------------------------------------------
#ifdef VFD_FCM204SD02GJ
#ifdef LCD_I80
/**
 * \brief initialize IOs for lcd display
 */
#define lcd_io_init()               do { \
                                    } while(0)
#define FC_M204_RS(x)
#define FC_M204_WR(x)
#endif /* LCD_I80 */
#ifdef LCD_M68
/**
 * \brief initialize IOs for lcd display
 */
#define lcd_io_init()               do { \
                                    } while(0)
#define FC_M204_RS(x)
#define FC_M204_WR(x)
#define FC_M204_EN(x)
#endif /* LCD_I80 */
#endif /* VFD_FCM204SD02GJ */
//  ----------------------------------------------------------------------
#ifdef VFD_FCM162SD13AA
#ifdef LCD_SERIAL
/**
 * \brief initialize IOs for lcd display
 * \remarks LCD_RES# (D7): output, [do not reset]
 * \remarks LCD_CS1# (D6): output, [do not select chip]
 * \remarks LCD_CLK (G7)
 * \remarks LCD_DA (G6) 
 */
#define lcd_io_init()               do { \
                                      TRISD &= 0xFF3F; \
                                    } while(0)
#define FC_M162_RES(x)              LATD = ((x)==1)? (LATD | 0x0080) : (LATD & 0xFF7F)
#define FC_M162_CS(x)               LATD = ((x)==1)? (LATD | 0x0040) : (LATD & 0xFFBF) 
#define FC_M162_CLK(x)              do { \
                                      PCONFIG(0); \
                                      LATG = ((x)==1)? (LATG | 0x0080) : (LATG & 0xFF7F); \
                                    } while(0)
#define FC_M162_DA(x)               do { \
                                      PCONFIG(0); \
                                      LATG = ((x)==1)? (LATG | 0x0040) : (LATG & 0xFFBF); \
                                    } while(0)
#endif /* LCD_SERIAL */
#endif /* VFD_FCM162SD13AA */


#endif /*PIN_DEFINE_H_*/
