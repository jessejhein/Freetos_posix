/**
 * demo config
 */

#ifndef PLATFORM_H_
#define PLATFORM_H_



/*
 * FreeRTOS Scheduler
 */
#ifdef FREERTOS_SCHED 
#define start_process()             {
#define end_process()               } return (void*)0
//  ==========Enable Coroutine Thread Scheduler in FREERTOS Scheduler========
#ifdef CRTHREAD_SCHED
#define MAX_CRTHREAD                10
#endif /* CRTHREAD_SCHED */
#else /* NO FREERTOS_SCHED */
#include <coroutine_st.h>
#define start_process()             scrBegin
#define end_process()               scrFinish((void*)0)
#endif /* NO FREERTOS_SCHED */



/*
 * System Setting
 */
#if MPLAB_DSPIC33_PORT
/*
 * DSPIC33
 */
#ifdef FJ128GP306
#include <p33FJ128GP306.h>
#endif /* FJ128GP306 */
#ifdef FJ256GP506
#include <p33FJ256GP506.h>
#endif /* FJ256GP506 */

/*
 * Tune FRC oscillator, if FRC is used; 
 * 0: Center frequency (7.37 MHz nominal)
 * 22: +8.25% (7.98 MHz)
 */
#define TUNE_FRC                    22 
#if(TUNE_FRC == 22)                             
  #define XTAL_FREQ_HZ              7981056  // 39,905,280Hz ~ 40MHz
#else /* NO FINE TUNE */
  #define XTAL_FREQ_HZ              7372800  // 36,864,000Hz ~ 36.8MHz
#endif /* NO FINE TUNE */
#define PLLPOST                     2
#define PLLPRE                      2
#define PLLFBD                      40
#define SYSTEM_CLK_HZ               ((unsigned long)(XTAL_FREQ_HZ*PLLFBD/(2*PLLPRE*PLLPOST)))
#define SYSTEM_VOLT                 ((float)3.3)   // Can be used for ADC reading calculation

#ifdef EXTERNAL_CLOCK_SOURCE
//PLL setting for external 10MHz Crystal
#define XTERN_CLK_XTAL_FREQ_HZ      10000000
#define XTERN_CLK_SRC_PLLPOST       2
#define XTERN_CLK_SRC_PLLPRE        2
#define XTERN_CLK_SRC_PLLFBD        32
#ifdef SYSTEM_CLK_HZ
#undef SYSTEM_CLK_HZ
#endif
#define SYSTEM_CLK_HZ               ((unsigned long)(XTERN_CLK_XTAL_FREQ_HZ*XTERN_CLK_SRC_PLLFBD/(2*XTERN_CLK_SRC_PLLPRE*XTERN_CLK_SRC_PLLPOST)))
#endif /* EXTERNAL_CLOCK_SOURCE */


/*
 * Register Mapping
 */
//  ============================I2C============================================== 
#define _SI2CIF                     _SI2C1IF
#define _MI2CIF                     _MI2C1IF
#define _SI2CIE                     _SI2C1IE
#define _MI2CIE                     _MI2C1IE
#define _MI2CInterrupt              _MI2C1Interrupt
#define _SI2CInterrupt              _SI2C1Interrupt
#define I2CBRG                      I2C1BRG
#define I2CCONbits                  I2C1CONbits
#define I2CSTATbits                 I2C1STATbits
#define I2CTRN                      I2C1TRN
#define I2CRCV                      I2C1RCV
#define I2CMSK                      I2C1MSK
#define I2CADD                      I2C1ADD
//  ============================ADC============================================== 
#define _ADIF                       _AD1IF
#define _ADIE                       _AD1IE
#define _ADCInterrupt               _ADC1Interrupt
#define ADPCFG                      AD1PCFGL
#define ADPCFGH                     AD1PCFGH
#define ADCSSL                      AD1CSSL
#define ADCSSH                      AD1CSSH
#define ADCHSbits                   AD1CHS0bits
#define ADCON4bits                  AD1CON4bits
#define ADCON3bits                  AD1CON3bits
#define ADCON2bits                  AD1CON2bits
#define ADCON1bits                  AD1CON1bits

#elif MPLAB_DSPIC30_PORT
/*
 *  DSPIC30
 */
#ifdef F5011
#include <p30f5011.h>
#endif /* F5011 */

#define XTAL_FREQ_HZ                7372800
#define PLL                         16
#define SYSTEM_CLK_HZ               ((unsigned long)(XTAL_FREQ_HZ*PLL/4))   //29,491,200
#define SYSTEM_VOLT                 ((float)5.0)    //Can be used for ADC reading calculation

#endif /* MPLAB_DSPIC30_PORT */



/*
 * Driver Modules
 * \li BASE_xxxx:   The base file handler to be returned by open()
 * \li xxxx0, xxx1: Unique string mapping to the device
 */
// UART Module *******************************************************************
#ifdef UART_MOD
//  ============================Device Handler=================================== 
#define BASE_COM                    3
#define COM0                        "A"
#define COM1                        "B"
//  ============================Baudrate Equation================================ 
#define UART_DEFAULT_BRG0           ( (unsigned int) \
                                          ( (float) SYSTEM_CLK_HZ \
                                        /   ( (float) 16*UART_BAUDRATE0) +0.5f) \
                                        - 1 \
                                    )
#define UART_DEFAULT_BRG1           ( (unsigned int) \
                                          ( (float) SYSTEM_CLK_HZ \
                                        /   ( (float) 16*UART_BAUDRATE1) +0.5f) \
                                        - 1 \
                                    )
#endif /* UART_MOD */



// I2C Module *******************************************************************
#ifdef I2C_MOD
//  ============================Baudrate Equation================================ 
//  I2C: Baudrate options for I2C
//   +-- I2CBRG = (Fcy/Fscl - Fcy/1111111)-1
//   +-- Fcy = 40MHz, Fscl = 100kHz, 400kHz, or 1MHz
#define I2C_BRG                     ( (unsigned int) \
                                          ( (unsigned long)SYSTEM_CLK_HZ/I2C_BAUDRATE) \
                                        - ( (unsigned long)SYSTEM_CLK_HZ/1111111) \
                                        - 1 \
                                    )
// Number of I2C devices
#ifdef I2C_DAC_MOD
#define I2C_DAC_MOD_T               1
#else 
#define I2C_DAC_MOD_T               0
#endif /* I2C_DAC_MOD */

#ifdef NVM_I2C
#define I2C_NVM_MOD_T               1
#else
#define I2C_NVM_MOD_T               0
#endif /* NVM_I2C */

#ifdef I2C_MOD_DSPIC_MOD
#define I2C_MOD_DSPIC_T             1
#else
#define I2C_MOD_DSPIC_T             0
#endif /* I2C_MOD_DSPIC_MOD */

#define I2C_NUM                     (I2C_DAC_MOD_T + I2C_NVM_MOD_T + I2C_MOD_DSPIC_T)
#endif /* I2C_MOD */



// I2C DAC Module ***************************************************************
#ifdef I2C_DAC_MOD
#ifndef I2C_MOD 
  #error "I2C_MOD is off."
#endif
//  ============================Devices Handler================================== 
#define BASE_I2C_DAC                5
#define I2C_DAC                     "C"
//  ======================I2C control for DAC==================================== 
// I2C address (Write Mode: For Read Mode, bit 0 = 1)
#ifdef I2C_MOD_DSPIC_MOD
// [Factory Preset] [A1] [A0] [R/^W]
//    1 0 0 1 1       0    0     0        => 0x98
#define I2C_DAC_ADDR                0x98
#else /* NO I2C_MOD_DSPIC_MOD */
// [Factory Preset] [A1] [A0] [R/^W]
//    1 0 0 1 1       1    1     0        => 0x9E
#define I2C_DAC_ADDR                0x9E
#endif /* NO I2C_MOD_DSPIC_MOD */
// Channel select
// Asynchrous update of DAC (L1,L0) at Selected channel, no power-down
// [A3] [A2] [L1] [L0] [x] [Sel1] [Sel2] [PD0]
//  0     0    0    1   x     Channel      0    
#define DAC_CHA                     0x10
#define DAC_CHB                     0x12
#define DAC_CHC                     0x14
#define DAC_CHD                     0x1E
//  ============================Properties======================================= 
#if (DAC_RESOLUTION == 10)
#define DAC_STEPS                   1023
#elif (DAC_RESOLUTION == 12)
#define DAC_STEPS                   4095
#else /* DAC_RESOLUTION ERROR */
#error "ERROR in DAC_RESOLUTION setting"
#endif /* DAC_RESOLUTION ERROR */
#endif /* I2C_DAC_MOD */



// Non-volatile Memory *********************************************************
#ifdef NVM_MOD
//  ============================Device Handler=================================== 
#define BASE_NVM                    6
#define NVM0                        "D"
#define NVM1                        "E"
//  ==========================I2C EEPROM Config==================================
// I2C address (Write Mode: For Read Mode, bit 0 = 1)
// [Factory Preset] [A2] [A1] [A0] [R/W#]
//    1 0 1 0         0   0    0     0    => 0xA0
#ifdef NVM_I2C
#ifndef I2C_MOD
  #error "I2C_MOD is off."
#endif
#define I2C_EEPROM_ADDR             0xA0
#define I2C_EEPROM_SIZE             0x8000      // EEPROM Size (in byte)
#define I2C_EEPROM_PAGE_SIZE        64          // EEPROM Page size for writing (in byte)
#endif /* NVM_I2C */
//  =========================Flash EEPROM Config================================= 
#ifdef NVM_FLASH
#define FLASH_EEPROM_BYTE_PER_WORD  2
#define FLASH_EEPROM_WORD_PER_ROW   64
#define FLASH_EEPROM_ROW_PER_PAGE   8
#define FLASH_EEPROM_SIZE           (FLASH_EEPROM_BYTE_PER_WORD* \
                                      FLASH_EEPROM_WORD_PER_ROW* \
                                      FLASH_EEPROM_ROW_PER_PAGE)
#endif /* NVM_FLASH */
//  =======================On-chip EEPROM Config================================= 
#ifdef NVM_ON_CHIP
#ifndef MPLAB_DSPIC30_PORT
  #error "Target chip has no on-chip EEPROM"
#endif /* NOT MPLAB_DSPIC30_PORT */
#define EEPROM_SIZE                 1024        // EEPROM Size (in byte)
#endif /* NVM_ON_CHIP */
#endif /* NVM_MOD */



// I2C DSPIC Module ***************************************************************
#ifdef I2C_MOD_DSPIC_MOD
#ifndef I2C_MOD 
  #error "I2C_MOD is off."
#endif
//  ============================Devices Handler================================== 
#define BASE_I2C_MOD_DSPIC          8
#define I2C_MOD_DSPIC               "F"
//  ======================I2C control for DSPIC MODULATION======================= 
// I2C address (Write Mode: For Read Mode, bit 0 = 1)
// [Factory Preset] [A2] [A1] [A0] [R/W#]
//    1 0 1 1         0   0    0     0   => 0xB0
#define I2C_MOD_DSPIC_ADDR          0xB0
// Channel Select
// Following definition in DAC
#define MOD_DSPIC_CHA               0x10
#define MOD_DSPIC_CHB               0x12
#define MOD_DSPIC_CHC               0x14
#define MOD_DSPIC_CHD               0x1E
#endif /* I2C_MOD_DSPIC_MOD */



#ifdef ADC_MOD
//  ============================Devices Handler================================== 
#define BASE_ADC                    9
#define ADC                         "G"
//  ============================Properties======================================= 
#define ADC_MAX_CH                  16          // maximum adc channels
#define ADC_QSIZE                   1           // size of adc queue per channel
#define ADC_STEPS                   4095
//  ============================Sampling Equation================================ 
#define ADC_TAD_REQ                 ( (int) \
                                         ( (double)1e9 \
                                       /   ( (14.0 + ADC_ACQ_TIME)*(double)ADC_SAMP_RATE ) ) \
                                       + 1)         
#if MPLAB_DSPIC33_PORT
  #define ADC_TAD_MIN               133         // in ns, see Electrical Specification on Datasheet
  #define ADC_ADCS                  ( (int) \
                                         ( (double)(ADC_TAD_REQ*1e-9*SYSTEM_CLK_HZ)+0.5) \
                                       - 1)  //ADCS<5:0> Setting for sampling rate [0-63]
  //NOTE: make sure ADC_TAD_ACT >= ADC_TAD_MIN
  #define ADC_TAD_ACT               ( ( (double)1e9*(ADC_ADCS+1))/SYSTEM_CLK_HZ)    //Actual TAD 

#elif MPLAB_DSPIC30_PORT
  #define ADC_TAD_MIN               334         // in ns, see Electrical Specification on Datasheet
  #define ADC_ADCS                  ( (int) \
                                         ( (double)(2*ADC_TAD_REQ*1e-9*SYSTEM_CLK_HZ)+0.5) \
                                       - 1)  //ADCS<5:0> Setting for sampling rate [0-63]
  //NOTE: make sure ADC_TAD_ACT >= ADC_TAD_MIN
  #define ADC_TAD_ACT               ( ( (double)1e9*0.5(ADC_ADCS+1))/SYSTEM_CLK_HZ)    //Actual TAD 
#endif /* MPLAB_DSPIC30_PORT */
#endif /* ADC_MOD */



// PWM Module *******************************************************************
#ifdef PWM_MOD
//  ============================Device Handler=================================== 
#define BASE_PWM                    10
#define PWM                         "H"
#endif /* PWM_MOD */



// Keyboard Module ***************************************************************
#ifdef KB_MOD
//  ============================Device Handler=================================== 
#define BASE_KB                     11
#define KB                          "I"
//  ============================Key Map for PUSH KEY============================= 
#define BASE_PUSH_KEY               GR_KEY_ENTER
#define PUSH_KEY0                   BASE_PUSH_KEY               //MWKEY_ENTER
#define PUSH_KEY1                   PUSH_KEY0 + 1               //MWKEY_UP
#define PUSH_KEY2                   PUSH_KEY1 + 1               //MWKEY_DOWN
#define PUSH_KEY3                   PUSH_KEY2 + 1               //MWKEY_LEFT
#define PUSH_KEY4                   PUSH_KEY3 + 1               //MWKEY_RIGHT
//  ============================Key Map for FUNCTION KEY========================= 
#define BASE_FN_KEY                 GR_KEY_F1           
#define FN_KEY0                     BASE_FN_KEY                 //MWKEY_F1
#define FN_KEY1                     BASE_FN_KEY + 1             //MWKEY_F2
//  ============================Key Map for ROTARY KEY===========================
#define BASE_ROTARY_KEY             GR_SPECIAL_KEY_ARROW_UP
#define ROTARY_KEY0_UP              BASE_ROTARY_KEY             //MWKEY_UP
#define ROTARY_KEY0_DN              GR_SPECIAL_KEY_ARROW_DOWN   //MWKEY_DOWN
#define ROTARY_KEY1_UP              ROTARY_KEY0_DN + 1
#define ROTARY_KEY1_DN              ROTARY_KEY1_UP + 1
#endif /* KB_MOD */



// ETHERNET Module ***************************************************************
#ifdef ETHERNET_MOD
//  ============================Device Handler=================================== 
#define BASE_ETHERNET               12
#define ETHERNET                    "J"
#endif //ETHERNET_MOD



// LED Module ********************************************************************
#ifdef LED_MOD
//  ============================Device Handler=================================== 
#define BASE_LED                    13
#define LED                         "K"
//  ============================MODE OF OPERATION================================ 
#define LED_OFF                     0
#define LED_ON                      1
#define LED_POS_PULSE               2
#define LED_NEG_PULSE               3
#define LED_IDLE                    0xFF
#endif /* LED_MOD */



// LCD Module ********************************************************************
#ifdef LCD_MOD
//  ============================Device Handler=================================== 
#define BASE_LCD                    14
#define LCD                         "L"
#endif /* LCD_MOD */

#endif /*PLATFORM_H_*/

